/* COPYRIGHT (C) HARRY CLARK 2024 */

/* MOTOROLA 68000 ASSEMBLER */

/* THIS FILE HOUSES THE NECESSITIES FOR THE ASSEMBLY PROCESS */
/* FOCUSSING ON THE BACKEND OF THE ASSEMBLER */

#ifndef ASSEMBLE
#define ASSEMBLE

/* NESTED INCLUDES */

#include "common.h"
#include "disasm.h"

/* SYSTEM INCLUDES */

#include <assert.h>
#include <ctype.h>
#include <stdio.h>
#include <string.h>

#if defined(USE_ASM)
#define USE_ASM
#else
#define USE_ASM

#define         MAX_OUTPUT_BUFFER       16

#define         DIRECTIVE_CHARS         "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789?_"
#define         LABEL_CHARS             DIRECTIVE_CHARS ".@"
#define         DIRECTIVE_MAX                   5
#define         DIRECTIVE_LENGTH_MAX            10

#define         PARAM_FALSE_IF                0
#define         PARAM_TOTAL                   1
#define         PARAM_SUFFIX                  ''

#define         PARAM_EOS                   '\0'

#define         PRINT_SEMANTIC(STATE, COMMENT, ADDRESS) fprintf(stderr, COMMENT)
#define         PRINT_INTERNAL(STATE) fputs(stderr, " ", STATE)

#define         FLAG_68000                  00000
#define         FLAG_68010                  00010
#define         FLAG_68020                  00020
#define         FLAG_68030                  00030
#define         FLAG_68040                  00040

#define         OPTION_68000                1
#define         OPTION_68010                2
#define         OPTION_68020                3
#define         OPTION_68030                4
#define         OPTION_68040                5
#define         OPTION_NONE                 0

#define         M68K_OPTION_TARGET      TARGET_CPU

#define         STD_DISPLAY_TEXT                0
#define         STD_DISPLAY_OUT                 1
#define         STD_DISPLAY_HELP                2

#define         STD_DISPLAY_NA                  -1

//=================================================
//=================================================

typedef struct OPCODE
{
    unsigned SIZE;
    char* OPCODE_NAME;

    EA_MODE ARGS;

    U16 BASE_CODE, EXT_CODE;
    unsigned BIT_SIZE;
    unsigned OFFSET;

    struct OPCODE* NEXT;

} OPCODE;

typedef struct MNEOMONIC
{
    char* NAME;
    struct OPCODE* OPCODES;
    struct MNEOMONIC* BEFORE;
    struct MNEOMONIC* AFTER;

} MNEOMONIC;

typedef struct OPTIONS
{
    const char* NAME;
    const char* HELP;
    int SET;
    int RESET;

} OPTIONS;

typedef struct INPUT
{
    struct DIRECTIVE_SYM* LABEL, *ACTION;
    UNK SIZE;

    int INSTR;
    int ARGS;
    

} INPUT;

typedef struct OUTPUT
{
    void(*INIT_OUTPUT)(char* SOURCE);
    void(*NEXT_LINE)(int LINE, char* SOURCE);
    void(*SET_ADDRESS)(U32 ADDRESS);
    void(*SET_START)(U32 ADDRESS);
    void(*ADD_BYTE)(U8 DATA);
    void(*END_OUTPUT)(void);

} OUTPUT;

typedef struct DIRECTIVE_SYM
{
    DIRECTIVES ID;
    char* TEXT;
    int LENGTH;

    S16 REG_NUM;
    unsigned CONTAINS;
    unsigned VALUE;

    OPCODE* OP;
    char* ERROR;
    struct DIRECTIVE_SYM* EXPR;
    struct DIRECTIVE_SYM* NEXT;

} DIRECTIVE_SYM;

//===============================================================================
//						68K OPCODE AND MNENOMIC DEFS.
//
//		THE FOLLOWING IS A MASSIVE LIST PERTAINING TOWARDS EACH INDIVIDUAL
// 					OPCODE AND MNENOMIC DEF AND EXPRESSION - 
//					INSPIRED HEAVILY FROM ASM68K AND SNASM68K
//===============================================================================

OPCODE OPCODE_ABCD = { SIZE_BYTE, "OPCODE_ABCD", NUM_AREG_DEC_IND | NUM_AREG_DEC_IND, 0xC108, 0x0000, 0, 0, NULL };
OPCODE OPCODE_ADD = { SIZE_BYTE, "OPCODE_ADD", NUM_DREG | NUM_DREG, 0xC100, 0x0000, 0, 0, &OPCODE_ABCD };
OPCODE OPCODE_ADDI = { SIZE_BWL, "OPCODE_ADDI", EA_SOURCE_ARG | NUM_DREG, 0xD000, 0x0000, 6, 0, NULL };
OPCODE OPCODE_ADDA = { SIZE_BWL, "OPCODE_ADDA", NUM_DREG | EA_MEMORY_ARG, 0xD100, 0x0000, 6, 9, &OPCODE_ADDI };
OPCODE OPCODE_ADDX = { SIZE_BWL, "OPCODE_ADDX", EA_IMMEDIATE | EA_DEST_ARG, 0x0600, 0x0000, 6, 0, NULL };
OPCODE OPCODE_ANDI = { SIZE_WL, "OPCODE_ANDI", EA_SOURCE_ARG | NUM_AREG, 0xD0C0, 0x0000, 8, 0, NULL };
OPCODE OPCODE_AND = { SIZE_BWL, "OPCODE_AND", NUM_AREG_DEC_IND | NUM_AREG_DEC_IND, 0xD108, 0x0000, 6, 9, NULL };
OPCODE OPCODE_ADDQ = { SIZE_BWL, "OPCODE_ADDQ", NUM_IMMEDIATE_QUICK | EA_DEST_ARG | EA_AREG, 0x5000, 0x0000, 6, 9, NULL };
OPCODE OPCODE_ASR = { SIZE_BWL, "OPCODE_ASR", NUM_IMMEDIATE_QUICK | NUM_DREG, 0xE000, 0x0000, 6, 9, &OPCODE_AND };
OPCODE OPCODE_BCC = { SIZE_UNDEF, "OPCODE_BCC", ABS_ADDRESS | NO_ARGUMENT, 0x6400, 0x0000, 0, 0, NULL };
OPCODE OPCODE_BCS = { SIZE_UNDEF, "OPCODE_BCS", ABS_ADDRESS | NO_ARGUMENT, 0x6500, 0x0000, 0, 0, &OPCODE_BCC };
OPCODE OPCODE_BGE = { SIZE_UNDEF, "OPCODE_BGE", ABS_ADDRESS | NO_ARGUMENT, 0x6C00, 0x0000, 0, 0, &OPCODE_BCS };
OPCODE OPCODE_BEQ = { SIZE_UNDEF, "OPCODE_BEQ", ABS_ADDRESS | NO_ARGUMENT, 0x6700, 0x0000, 0, 0, &OPCODE_BGE };
OPCODE OPCODE_ASL = { SIZE_BWL, "OPCODE_ASL", NUM_IMMEDIATE_QUICK | NUM_DREG, 0xE100, 0x0000, 6, 9, &OPCODE_BEQ };
OPCODE OPCODE_BHI = { SIZE_UNDEF, "OPCODE_BHI", ABS_ADDRESS | NO_ARGUMENT, 0x6200, 0x0000, 0, 0, &OPCODE_ASL };
OPCODE OPCODE_BGT = { SIZE_UNDEF, "OPCODE_BGT", ABS_ADDRESS | NO_ARGUMENT, 0x6E00, 0x0000, 0, 0, NULL };
OPCODE OPCODE_BLE = { SIZE_UNDEF, "OPCODE_BLE", ABS_ADDRESS | NO_ARGUMENT, 0x6F00, 0x0000, 0, 0, &OPCODE_BHI };
OPCODE OPCODE_BHS = { SIZE_UNDEF, "OPCODE_BHS", ABS_ADDRESS | NO_ARGUMENT, 0x6400, 0x0000, 0, 0, &OPCODE_BLE };
OPCODE OPCODE_BLS = { SIZE_UNDEF, "OPCODE_BLS", ABS_ADDRESS | NO_ARGUMENT, 0x6300, 0x0000, 0, 0, &OPCODE_BHS };
OPCODE OPCODE_BMI = { SIZE_UNDEF, "OPCODE_BMI", ABS_ADDRESS | NO_ARGUMENT, 0x6B00, 0x0000, 0, 0, &OPCODE_BLS };
OPCODE OPCODE_BLT = { SIZE_UNDEF, "OPCODE_BLT", ABS_ADDRESS | NO_ARGUMENT, 0x6D00, 0x0000, 0, 0, &OPCODE_BMI };
OPCODE OPCODE_BLO = { SIZE_UNDEF, "OPCODE_BLO", ABS_ADDRESS | NO_ARGUMENT, 0x6500, 0x0000, 0, 0, &OPCODE_BLT };
OPCODE OPCODE_BPL = { SIZE_UNDEF, "OPCODE_BPL", ABS_ADDRESS | NO_ARGUMENT, 0x6A00, 0x0000, 0, 0, &OPCODE_BLO };
OPCODE OPCODE_BTST = { SIZE_LONG, "OPCODE_BTST", NUM_DREG | EA_DREG, 0x0100, 0x0000, 0, 0, &OPCODE_BPL };
OPCODE OPCODE_BVS = { SIZE_UNDEF, "OPCODE_BVS", ABS_ADDRESS | NO_ARGUMENT, 0x6B00, 0x0000, 0, 0, &OPCODE_BTST };
OPCODE OPCODE_BVC = { SIZE_UNDEF, "OPCODE_BVC", ABS_ADDRESS | NO_ARGUMENT, 0x6800, 0x0000, 0, 0, &OPCODE_BVS };
OPCODE OPCODE_CMPA = { SIZE_WL, "OPCODE_CMPA", EA_SOURCE_ARG | NUM_AREG, 0xB108, 0x0000, 6, 9, &OPCODE_BVC };
OPCODE OPCODE_CMP = { SIZE_BWL, "OPCODE_CMP", NUM_DREG | EA_MEMORY_ARG, 0xB100, 0x0000, 6, 9, &OPCODE_CMPA };
OPCODE OPCODE_CMPM = { SIZE_BWL, "OPCODE_CMPM", EA_AREG_IND_INC | EA_AREG_IND_INC, 0xB148, 0x0000, 6, 9, &OPCODE_CMP };
OPCODE OPCODE_DBCS = { SIZE_UNDEF, "OPCODE_DBCS", NUM_DREG | ABS_ADDRESS, 0x51C8, 0x0000, 0, 0, &OPCODE_CMPM };
OPCODE OPCODE_DBCC = { SIZE_UNDEF, "OPCODE_DBCC", NUM_DREG | ABS_ADDRESS, 0x51C0, 0x0000, 0, 0, &OPCODE_DBCS };
OPCODE OPCODE_BCHG = { SIZE_LONG, "OPCODE_BCHG", NUM_DREG | EA_DREG, 0x0140, 0x0000, 0, 9, NULL };
OPCODE OPCODE_BCLR = { SIZE_BYTE, "OPCODE_BCLR", NUM_IMMEDIATE_3BIT | EA_MEMORY_ARG, 0x0840, 0x0000, 0, 0, NULL };
OPCODE OPCODE_BSET = { SIZE_LONG, "OPCODE_BSET", NUM_IMMEDIATE_5BIT | EA_DREG, 0x0840, 0x0000, 0, 0, NULL };
OPCODE OPCODE_BRA = { SIZE_UNDEF, "OPCODE_BRA", ABS_ADDRESS | NO_ARGUMENT, 0x6000, 0x0000, 0, 0, NULL };
OPCODE OPCODE_BSR = { SIZE_UNDEF, "OPCODE_BSR", ABS_ADDRESS | NO_ARGUMENT, 0x6100, 0x0000, 0, 0, NULL };
OPCODE OPCODE_BNE = { SIZE_UNDEF, "OPCODE_BNE", ABS_ADDRESS | NO_ARGUMENT, 0x6600, 0x0000, 0, 0, NULL };
OPCODE OPCODE_CLR = { SIZE_BWL, "OPCODE_CLR", EA_DEST_ARG | NO_ARGUMENT, 0x4200, 0x0000, 6, 0, NULL };
OPCODE OPCODE_CMPI = { SIZE_BWL, "OPCODE_CMPI", EA_IMMEDIATE | EA_DEST_ARG, 0x0C00, 0x0000, 6, 0, NULL };
OPCODE OPCODE_DIVS = { SIZE_WORD, "OPCODE_DIVS", EA_SOURCE_ARG | NUM_DREG, 0x81C0, 0x0000, 0, 0, NULL };
OPCODE OPCODE_DIVU = { SIZE_WORD, "OPCODE_DIVU", EA_SOURCE_ARG | NUM_DREG, 0x80C0, 0x0000, 0, 0, NULL };
OPCODE OPCODE_DBF = { SIZE_UNDEF, "OPCODE_DBF", NUM_DREG | ABS_ADDRESS, 0x51C8, 0x0000, 0, 0, NULL };
OPCODE OPCODE_DBGT = { SIZE_UNDEF, "OPCODE_DBGT", NUM_DREG | ABS_ADDRESS, 0x51C8, 0x0000, 0, 0, NULL };
OPCODE OPCODE_DBGE = { SIZE_UNDEF, "OPCODE_DBGE", NUM_DREG | ABS_ADDRESS, 0x51C8, 0x0000, 0, 0, NULL };
OPCODE OPCODE_DBHS = { SIZE_UNDEF, "OPCODE_DBHS", NUM_DREG | ABS_ADDRESS, 0x51C8, 0x0000, 0, 0, NULL };
OPCODE OPCODE_DBLO = { SIZE_UNDEF, "OPCODE_DBLO", NUM_DREG | ABS_ADDRESS, 0x51C8, 0x0000, 0, 0, NULL };
OPCODE OPCODE_DBLE = { SIZE_UNDEF, "OPCODE_DBLE", NUM_DREG | ABS_ADDRESS, 0x51C8, 0x0000, 0, 0, NULL };
OPCODE OPCODE_DBHI = { SIZE_UNDEF, "OPCODE_DBHI", NUM_DREG | ABS_ADDRESS, 0x51C8, 0x0000, 0, 0, NULL };
OPCODE OPCODE_DBEQ = { SIZE_UNDEF, "OPCODE_DBEQ", NUM_DREG | ABS_ADDRESS, 0x51C8, 0x0000, 0, 0, NULL };
OPCODE OPCODE_DBLT = { SIZE_UNDEF, "OPCODE_DBLT", NUM_DREG | ABS_ADDRESS, 0x51C8, 0x0000, 0, 0, NULL };
OPCODE OPCODE_DBNE = { SIZE_UNDEF, "OPCODE_DBNE", NUM_DREG | ABS_ADDRESS, 0x51C8, 0x0000, 0, 0, NULL };
OPCODE OPCODE_DBMI = { SIZE_UNDEF, "OPCODE_DBMI", NUM_DREG | ABS_ADDRESS, 0x51C8, 0x0000, 0, 0, NULL };
OPCODE OPCODE_DBRA = { SIZE_UNDEF, "OPCODE_DBRA", NUM_DREG | ABS_ADDRESS, 0x51C8, 0x0000, 0, 0, NULL };
OPCODE OPCODE_DBVC = { SIZE_UNDEF, "OPCODE_DBVC", NUM_DREG | ABS_ADDRESS, 0x51C8, 0x0000, 0, 0, NULL };
OPCODE OPCODE_DBT = { SIZE_UNDEF, "OPCODE_DBT", NUM_DREG | ABS_ADDRESS, 0x51C8, 0x0000, 0, 0, NULL };
OPCODE OPCODE_DBPL = { SIZE_UNDEF, "OPCODE_DBPL", NUM_DREG | ABS_ADDRESS, 0x51C8, 0x0000, 0, 0, NULL };
OPCODE OPCODE_DBVS = { SIZE_UNDEF, "OPCODE_DBVS", NUM_DREG | ABS_ADDRESS, 0x51C8, 0x0000, 0, 0, NULL };
OPCODE OPCODE_DBLS = { SIZE_UNDEF, "OPCODE_DBLS", NUM_DREG | ABS_ADDRESS, 0x51C8, 0x0000, 0, 0, NULL };
OPCODE OPCODE_EOR = { SIZE_BWL, "OPCODE_EOR", EA_SOURCE_ARG | NUM_DREG, 0xB180, 0x0000, 6, 0, NULL };
OPCODE OPCODE_EORI = { SIZE_BWL, "OPCODE_EORI", EA_IMMEDIATE | EA_DEST_ARG, 0x0A00, 0x0000, 6, 0, NULL };
OPCODE OPCODE_EXT = { SIZE_WL, "OPCODE_EXT", NUM_DREG | NO_ARGUMENT, 0x4800, 0x0000, 6, 0, NULL };
OPCODE OPCODE_JMP = { SIZE_UNDEF, "OPCODE_JMP", EA_ADDRESS_ARG | NO_ARGUMENT, 0x4EC0, 0x0000, 0, 0, NULL };
OPCODE OPCODE_LSL = { SIZE_BWL, "OPCODE_LSL", NUM_IMMEDIATE_QUICK | NUM_DREG, 0xE108, 0x0000, 6, 9, NULL };
OPCODE OPCODE_LSR = { SIZE_BWL, "OPCODE_LSR", NUM_IMMEDIATE_QUICK | NUM_DREG, 0xE008, 0x0000, 6, 9, NULL };
OPCODE OPCODE_MOVEP = { SIZE_WL, "OPCODE_MOVEP", NUM_DREG | EA_AREG_IND_DISP, 0x0108, 0x0000, 6, 0, NULL };
OPCODE OPCODE_MULS = { SIZE_WORD, "OPCODE_MULS", EA_SOURCE_ARG | NUM_DREG, 0xC1C0, 0x0000, 0, 0, NULL };
OPCODE OPCODE_NBCD = { SIZE_BYTE, "OPCODE_NBCD", EA_DEST_ARG | NO_ARGUMENT, 0x4800, 0x0000, 0, 0, NULL };
OPCODE OPCODE_NEGX = { SIZE_BWL, "OPCODE_NEGX", EA_DEST_ARG | NO_ARGUMENT, 0x4000, 0x0000, 6, 0, NULL };
OPCODE OPCODE_NOT = { SIZE_BWL, "OPCODE_NOT", EA_DEST_ARG | NO_ARGUMENT, 0x4600, 0x0000, 6, 0, NULL };
OPCODE OPCODE_ORI = { SIZE_BWL, "OPCODE_ORI", EA_IMMEDIATE | EA_DEST_ARG, 0x0000, 0x0000, 6, 0, NULL };
OPCODE OPCODE_PEA = { SIZE_UNDEF, "OPCODE_PEA", EA_ADDRESS_ARG | NO_ARGUMENT, 0x4840, 0x0000, 0, 0, NULL };
OPCODE OPCODE_RESET = { SIZE_UNDEF, "OPCODE_RESET", NO_ARGUMENT | NO_ARGUMENT, 0x4E70, 0x0000, 0, 0, NULL };
OPCODE OPCODE_ROR = { SIZE_BWL, "OPCODE_ROR", NUM_DREG | NUM_DREG, 0xE038, 0x0000, 6, 9, NULL };
OPCODE OPCODE_ROXL = { SIZE_BWL, "OPCODE_ROXL", NUM_DREG | NUM_DREG, 0xE130, 0x0000, 6, 9, NULL };
OPCODE OPCODE_ROXR = { SIZE_BWL, "OPCODE_ROXR", NUM_DREG | NUM_DREG, 0xE030, 0x0000, 6, 9, NULL };
OPCODE OPCODE_RTD = { SIZE_UNDEF, "OPCODE_RTD", NO_ARGUMENT | NO_ARGUMENT, 0x4E74, 0x0000, 0, 0, NULL };
OPCODE OPCODE_RTE = { SIZE_UNDEF, "OPCODE_RTE", NO_ARGUMENT | NO_ARGUMENT, 0x4E73, 0x0000, 0, 0, NULL };
OPCODE OPCODE_RTR = { SIZE_UNDEF, "OPCODE_RTR", NO_ARGUMENT | NO_ARGUMENT, 0x4E77, 0x0000, 0, 0, NULL };
OPCODE OPCODE_SBCD = { SIZE_BYTE, "OPCODE_SBCD", NUM_DREG | NUM_DREG, 0x8100, 0x0000, 0, 0, NULL };
OPCODE OPCODE_SCC = { SIZE_BYTE, "OPCODE_SCC", EA_DEST_ARG | NO_ARGUMENT, 0x54C0, 0x0000, 0, 0, NULL };
OPCODE OPCODE_SCS = { SIZE_BYTE, "OPCODE_SCS", EA_DEST_ARG | NO_ARGUMENT, 0x55C0, 0x0000, 0, 0, NULL };
OPCODE OPCODE_SEQ = { SIZE_BYTE, "OPCODE_SEQ", EA_DEST_ARG | NO_ARGUMENT, 0x57C0, 0x0000, 0, 0, NULL };
OPCODE OPCODE_SF = { SIZE_BYTE, "OPCODE_SF", EA_DEST_ARG | NO_ARGUMENT, 0x51C0, 0x0000, 0, 0, NULL };
OPCODE OPCODE_SGE = { SIZE_BYTE, "OPCODE_SGE", EA_DEST_ARG | NO_ARGUMENT, 0x5CC0, 0x0000, 0, 0, NULL };
OPCODE OPCODE_SGT = { SIZE_BYTE, "OPCODE_SGT", EA_DEST_ARG | NO_ARGUMENT, 0x5EC0, 0x0000, 0, 0, NULL };
OPCODE OPCODE_SHI = { SIZE_BYTE, "OPCODE_SHI", EA_DEST_ARG | NO_ARGUMENT, 0x52C0, 0x0000, 0, 0, NULL };
OPCODE OPCODE_SHS = { SIZE_BYTE, "OPCODE_SHS", EA_DEST_ARG | NO_ARGUMENT, 0x54C0, 0x0000, 0, 0, NULL };
OPCODE OPCODE_SLE = { SIZE_BYTE, "OPCODE_SLE", EA_DEST_ARG | NO_ARGUMENT, 0x5FC0, 0x0000, 0, 0, NULL };
OPCODE OPCODE_SLO = { SIZE_BYTE, "OPCODE_SLO", EA_DEST_ARG | NO_ARGUMENT, 0x55C0, 0x0000, 0, 0, NULL };
OPCODE OPCODE_SLS = { SIZE_BYTE, "OPCODE_SLS", EA_DEST_ARG | NO_ARGUMENT, 0x53C0, 0x0000, 0, 0, NULL };
OPCODE OPCODE_SLT = { SIZE_BYTE, "OPCODE_SLT", EA_DEST_ARG | NO_ARGUMENT, 0x5DC0, 0x0000, 0, 0, NULL };
OPCODE OPCODE_SMI = { SIZE_BYTE, "OPCODE_SMI", EA_DEST_ARG | NO_ARGUMENT, 0x5BC0, 0x0000, 0, 0, NULL };
OPCODE OPCODE_SNE = { SIZE_BYTE, "OPCODE_SNE", EA_DEST_ARG | NO_ARGUMENT, 0x56C0, 0x0000, 0, 0, NULL };
OPCODE OPCODE_SPL = { SIZE_BYTE, "OPCODE_SPL", EA_DEST_ARG | NO_ARGUMENT, 0x5AC0, 0x0000, 0, 0, NULL };
OPCODE OPCODE_ST = { SIZE_BYTE, "OPCODE_ST", EA_DEST_ARG | NO_ARGUMENT, 0x50C0, 0x0000, 0, 0, NULL };
OPCODE OPCODE_SUBA = { SIZE_WL, "OPCODE_SUBA", EA_SOURCE_ARG | NUM_AREG, 0x90C0, 0x0000, 6, 9, NULL };
OPCODE OPCODE_SUBI = { SIZE_BWL, "OPCODE_SUBI", EA_IMMEDIATE | EA_DEST_ARG, 0x0400, 0x0000, 6, 0, NULL };
OPCODE OPCODE_SUBQ = { SIZE_BWL, "OPCODE_SUBQ", NUM_IMMEDIATE_QUICK | EA_DEST_ARG, 0x5100, 0x0000, 6, 9, NULL };
OPCODE OPCODE_SUBX = { SIZE_BWL, "OPCODE_SUBX", NUM_DREG | NUM_DREG, 0x9100, 0x0000, 6, 9, NULL };
OPCODE OPCODE_SVC = { SIZE_BYTE, "OPCODE_SVC", EA_DEST_ARG | NO_ARGUMENT, 0x58C0, 0x0000, 0, 0, NULL };
OPCODE OPCODE_SVS = { SIZE_BYTE, "OPCODE_SVS", EA_DEST_ARG | NO_ARGUMENT, 0x59C0, 0x0000, 0, 0, NULL };
OPCODE OPCODE_SWAP = { SIZE_WORD, "OPCODE_SWAP", NUM_DREG | NO_ARGUMENT, 0x4840, 0x0000, 0, 0, NULL };
OPCODE OPCODE_TRAPV = { SIZE_UNDEF, "OPCODE_TRAPV", NO_ARGUMENT | NO_ARGUMENT, 0x4E76, 0x0000, 0, 0, NULL };
OPCODE OPCODE_XOR = { SIZE_BWL, "OPCODE_XOR", EA_SOURCE_ARG | NUM_DREG, 0x8180, 0x0000, 6, 0, NULL };
OPCODE OPCODE_XORI = { SIZE_BWL, "OPCODE_XORI", EA_IMMEDIATE | EA_DEST_ARG, 0x0A80, 0x0000, 6, 0, NULL };
OPCODE OPCODE_EXG = { SIZE_LONG, "OPCODE_EXG", NUM_DREG | NUM_DREG, 0xC140, 0x0000, 0, 9, NULL };
OPCODE OPCODE_ILLEGAL = { SIZE_UNDEF, "OPCODE_ILLEGAL", NO_ARGUMENT | NO_ARGUMENT, 0x4AFC, 0x0000, 0, 0, NULL };
OPCODE OPCODE_JSR = { SIZE_UNDEF, "OPCODE_JSR", EA_ADDRESS_ARG | NO_ARGUMENT, 0x4E80, 0x0000, 0, 0, NULL };
OPCODE OPCODE_LEA = { SIZE_UNDEF, "OPCODE_LEA", EA_ADDRESS_ARG | NUM_AREG, 0x41C0, 0x0000, 0, 0, NULL };
OPCODE OPCODE_LINK = { SIZE_UNDEF, "OPCODE_LINK", NUM_AREG | NUM_IMMEDIATE_16, 0x4E50, 0x0000, 0, 0, NULL };
OPCODE OPCODE_MOVE = { SIZE_BWL, "OPCODE_MOVE", EA_SOURCE_ARG | EA_DEST_ARG, 0x0000, 0x0000, 12, 0, NULL };
OPCODE OPCODE_MOVEC = { SIZE_LONG, "OPCODE_MOVEC", CONTROL_REG | NUM_DREG, 0x4E7A, 0x0000, 0, 0, NULL };
OPCODE OPCODE_MOVES = { SIZE_BWL, "OPCODE_MOVES", EA_MEMORY_ARG | NUM_DREG, 0x0E00, 0x0000, 6, 0, NULL };
OPCODE OPCODE_MOVEM = { SIZE_WL, "OPCODE_MOVEM", REGISTER_LIST | EA_AREG_DEC_IND, 0x4880, 0x0000, 6, 0, NULL };
OPCODE OPCODE_MOVEA = { SIZE_WL, "OPCODE_MOVEA", EA_SOURCE_ARG | NUM_AREG, 0x2040, 0x0000, 12, 0, NULL };
OPCODE OPCODE_MOVEQ = { SIZE_LONG, "OPCODE_MOVEQ", NUM_IMMEDIATE_8 | NUM_DREG, 0x7000, 0x0000, 0, 0, NULL };
OPCODE OPCODE_MULU = { SIZE_WORD, "OPCODE_MULU", EA_SOURCE_ARG | NUM_DREG, 0xC0C0, 0x0000, 0, 0, NULL };
OPCODE OPCODE_NBC = { SIZE_BYTE, "OPCODE_NBC", EA_DEST_ARG | NO_ARGUMENT, 0x4800, 0x0000, 0, 0, NULL };
OPCODE OPCODE_NEG = { SIZE_BWL, "OPCODE_NEG", EA_DEST_ARG | NO_ARGUMENT, 0x4400, 0x0000, 6, 0, NULL };
OPCODE OPCODE_NOP = { SIZE_UNDEF, "OPCODE_NOP", NO_ARGUMENT | NO_ARGUMENT, 0x4E71, 0x0000, 0, 0, NULL };
OPCODE OPCODE_OR = { SIZE_BWL, "OPCODE_OR", EA_SOURCE_ARG | NUM_DREG, 0x8000, 0x0000, 6, 0, NULL };
OPCODE OPCODE_ROL = { SIZE_BWL, "OPCODE_ROL", NUM_DREG | NUM_DREG, 0xE138, 0x0000, 6, 9, NULL };
OPCODE OPCODE_RTS = { SIZE_UNDEF, "OPCODE_RTS", NO_ARGUMENT | NO_ARGUMENT, 0x4E75, 0x0000, 0, 0, NULL };
OPCODE OPCODE_STOP = { SIZE_UNDEF, "OPCODE_STOP", NO_ARGUMENT | NO_ARGUMENT, 0x4E72, 0x0000, 0, 0, NULL };
OPCODE OPCODE_SUB = { SIZE_BWL, "OPCODE_SUB", NUM_DREG | EA_MEMORY_ARG, 0x9100, 0x0000, 6, 9, NULL };
OPCODE OPCODE_TAS = { SIZE_BYTE, "OPCODE_TAS", EA_DEST_ARG | NO_ARGUMENT, 0x4AC0, 0x0000, 0, 0, NULL };
OPCODE OPCODE_TRAP = { SIZE_UNDEF, "OPCODE_TRAP", NUM_IMMEDIATE_4 | NO_ARGUMENT, 0x4E40, 0x0000, 0, 0, NULL };
OPCODE OPCODE_TST = { SIZE_BWL, "OPCODE_TST", EA_DEST_ARG | NO_ARGUMENT, 0x4A00, 0x0000, 6, 0, NULL };
OPCODE OPCODE_UNLK = { SIZE_UNDEF, "OPCODE_UNLK", NUM_AREG | NO_ARGUMENT, 0x4E58, 0x0000, 0, 0, NULL };


MNEOMONIC MNEMONIC_ABCD = { "ABCD", &OPCODE_ABCD, NULL, NULL };
MNEOMONIC MNEMONIC_ADD = { "ADD", &OPCODE_ADD, &MNEMONIC_ABCD, NULL };
MNEOMONIC MNEMONIC_ADDI = { "ADDI", &OPCODE_ADDI, NULL, NULL };
MNEOMONIC MNEMONIC_ADDA = { "ADDA", &OPCODE_ADDA, &MNEMONIC_ADD, &MNEMONIC_ADDI };
MNEOMONIC MNEMONIC_ADDX = { "ADDX", &OPCODE_ADDX, NULL, NULL };
MNEOMONIC MNEMONIC_ANDI = { "ANDI", &OPCODE_ANDI, NULL, NULL };
MNEOMONIC MNEMONIC_AND = { "AND", &OPCODE_AND, &MNEMONIC_ADDX, &MNEMONIC_ANDI };
MNEOMONIC MNEMONIC_ADDQ = { "ADDQ", &OPCODE_ADDQ, &MNEMONIC_ADDA, &MNEMONIC_AND };
MNEOMONIC MNEMONIC_ASR = { "ASR", &OPCODE_ASR, NULL, NULL };
MNEOMONIC MNEMONIC_BCHG = { "BCHG", &OPCODE_BCHG, NULL, NULL };
MNEOMONIC MNEMONIC_BCC = { "BCC", &OPCODE_BCC, &MNEMONIC_ASR, &MNEMONIC_BCHG };
MNEOMONIC MNEMONIC_BCS = { "BCS", &OPCODE_BCS, NULL, NULL };
MNEOMONIC MNEMONIC_BGE = { "BGE", &OPCODE_BGE, NULL, NULL };
MNEOMONIC MNEMONIC_BEQ = { "BEQ", &OPCODE_BEQ, &MNEMONIC_BCS, &MNEMONIC_BGE };
MNEOMONIC MNEMONIC_BCLR = { "BCLR", &OPCODE_BCLR, &MNEMONIC_BCC, &MNEMONIC_BEQ };
MNEOMONIC MNEMONIC_ASL = { "ASL", &OPCODE_ASL, &MNEMONIC_ADDQ, &MNEMONIC_BCLR };
MNEOMONIC MNEMONIC_BHI = { "BHI", &OPCODE_BHI, NULL, NULL };
MNEOMONIC MNEMONIC_BLE = { "BLE", &OPCODE_BLE, NULL, NULL };
MNEOMONIC MNEMONIC_BHS = { "BHS", &OPCODE_BHS, &MNEMONIC_BHI, &MNEMONIC_BLE };
MNEOMONIC MNEMONIC_BLS = { "BLS", &OPCODE_BLS, NULL, NULL };
MNEOMONIC MNEMONIC_BMI = { "BMI", &OPCODE_BMI, NULL, NULL };
MNEOMONIC MNEMONIC_BLT = { "BLT", &OPCODE_BLT, &MNEMONIC_BLS, &MNEMONIC_BMI };
MNEOMONIC MNEMONIC_BLO = { "BLO", &OPCODE_BLO, &MNEMONIC_BHS, &MNEMONIC_BLT };
MNEOMONIC MNEMONIC_BPL = { "BPL", &OPCODE_BPL, NULL, NULL };
MNEOMONIC MNEMONIC_BSET = { "BSET", &OPCODE_BSET, NULL, NULL };
MNEOMONIC MNEMONIC_BRA = { "BRA", &OPCODE_BRA, &MNEMONIC_BPL, &MNEMONIC_BSET };
MNEOMONIC MNEMONIC_BTST = { "BTST", &OPCODE_BTST, NULL, NULL };
MNEOMONIC MNEMONIC_BVS = { "BVS", &OPCODE_BVS, NULL, NULL };
MNEOMONIC MNEMONIC_BVC = { "BVC", &OPCODE_BVC, &MNEMONIC_BTST, &MNEMONIC_BVS };
MNEOMONIC MNEMONIC_BSR = { "BSR", &OPCODE_BSR, &MNEMONIC_BRA, &MNEMONIC_BVC };
MNEOMONIC MNEMONIC_BNE = { "BNE", &OPCODE_BNE, &MNEMONIC_BLO, &MNEMONIC_BSR };
MNEOMONIC MNEMONIC_BGT = { "BGT", &OPCODE_BGT, &MNEMONIC_ASL, &MNEMONIC_BNE };
MNEOMONIC MNEMONIC_CLR = { "CLR", &OPCODE_CLR, NULL, NULL };
MNEOMONIC MNEMONIC_CMPA = { "CMPA", &OPCODE_CMPA, NULL, NULL };
MNEOMONIC MNEMONIC_CMP = { "CMP", &OPCODE_CMP, &MNEMONIC_CLR, &MNEMONIC_CMPA };
MNEOMONIC MNEMONIC_CMPM = { "CMPM", &OPCODE_CMPM, NULL, NULL };
MNEOMONIC MNEMONIC_DBCS = { "DBCS", &OPCODE_DBCS, NULL, NULL };
MNEOMONIC MNEMONIC_DBCC = { "DBCC", &OPCODE_DBCC, &MNEMONIC_CMPM, &MNEMONIC_DBCS };
MNEOMONIC MNEMONIC_CMPI = { "CMPI", &OPCODE_CMPI, &MNEMONIC_CMP, &MNEMONIC_DBCC };
MNEOMONIC MNEMONIC_DBF = { "DBF", &OPCODE_DBF, NULL, NULL };
MNEOMONIC MNEMONIC_DBGT = { "DBGT", &OPCODE_DBGT, NULL, NULL };
MNEOMONIC MNEMONIC_DBGE = { "DBGE", &OPCODE_DBGE, &MNEMONIC_DBF, &MNEMONIC_DBGT };
MNEOMONIC MNEMONIC_DBHS = { "DBHS", &OPCODE_DBHS, NULL, NULL };
MNEOMONIC MNEMONIC_DBLO = { "DBLO", &OPCODE_DBLO, NULL, NULL };
MNEOMONIC MNEMONIC_DBLE = { "DBLE", &OPCODE_DBLE, &MNEMONIC_DBHS, &MNEMONIC_DBLO };
MNEOMONIC MNEMONIC_DBHI = { "DBHI", &OPCODE_DBHI, &MNEMONIC_DBGE, &MNEMONIC_DBLE };
MNEOMONIC MNEMONIC_DBEQ = { "DBEQ", &OPCODE_DBEQ, &MNEMONIC_CMPI, &MNEMONIC_DBHI };
MNEOMONIC MNEMONIC_DBLT = { "DBLT", &OPCODE_DBLT, NULL, NULL };
MNEOMONIC MNEMONIC_DBNE = { "DBNE", &OPCODE_DBNE, NULL, NULL };
MNEOMONIC MNEMONIC_DBMI = { "DBMI", &OPCODE_DBMI, &MNEMONIC_DBLT, &MNEMONIC_DBNE };
MNEOMONIC MNEMONIC_DBRA = { "DBRA", &OPCODE_DBRA, NULL, NULL };
MNEOMONIC MNEMONIC_DBVC = { "DBVC", &OPCODE_DBVC, NULL, NULL };
MNEOMONIC MNEMONIC_DBT = { "DBT", &OPCODE_DBT, &MNEMONIC_DBRA, &MNEMONIC_DBVC };
MNEOMONIC MNEMONIC_DBPL = { "DBPL", &OPCODE_DBPL, &MNEMONIC_DBMI, &MNEMONIC_DBT };
MNEOMONIC MNEMONIC_DIVS = { "DIVS", &OPCODE_DIVS, NULL, NULL };
MNEOMONIC MNEMONIC_EOR = { "EOR", &OPCODE_EOR, NULL, NULL };
MNEOMONIC MNEMONIC_DIVU = { "DIVU", &OPCODE_DIVU, &MNEMONIC_DIVS, &MNEMONIC_EOR };
MNEOMONIC MNEMONIC_EXG = { "EXG", &OPCODE_EXG, NULL, NULL };
MNEOMONIC MNEMONIC_ILLEGAL = { "ILLEGAL", &OPCODE_ILLEGAL, NULL, NULL };
MNEOMONIC MNEMONIC_EXT = { "EXT", &OPCODE_EXT, &MNEMONIC_EXG, &MNEMONIC_ILLEGAL };
MNEOMONIC MNEMONIC_EORI = { "EORI", &OPCODE_EORI, &MNEMONIC_DIVU, &MNEMONIC_EXT };
MNEOMONIC MNEMONIC_DBVS = { "DBVS", &OPCODE_DBVS, &MNEMONIC_DBPL, &MNEMONIC_EORI };
MNEOMONIC MNEMONIC_DBLS = { "DBLS", &OPCODE_DBLS, &MNEMONIC_DBEQ, &MNEMONIC_DBVS };
MNEOMONIC MNEMONIC_JSR = { "JSR", &OPCODE_JSR, NULL, NULL };
MNEOMONIC MNEMONIC_LEA = { "LEA", &OPCODE_LEA, &MNEMONIC_JSR, NULL };
MNEOMONIC MNEMONIC_LSL = { "LSL", &OPCODE_LSL, NULL, NULL };
MNEOMONIC MNEMONIC_LINK = { "LINK", &OPCODE_LINK, &MNEMONIC_LEA, &MNEMONIC_LSL };
MNEOMONIC MNEMONIC_MOVE = { "MOVE", &OPCODE_MOVE, NULL, NULL };
MNEOMONIC MNEMONIC_MOVEC = { "MOVEC", &OPCODE_MOVEC, NULL, NULL };
MNEOMONIC MNEMONIC_MOVEA = { "MOVEA", &OPCODE_MOVEA, &MNEMONIC_MOVE, &MNEMONIC_MOVEC };
MNEOMONIC MNEMONIC_LSR = { "LSR", &OPCODE_LSR, &MNEMONIC_LINK, &MNEMONIC_MOVEA };
MNEOMONIC MNEMONIC_MOVEP = { "MOVEP", &OPCODE_MOVEP, NULL, NULL };
MNEOMONIC MNEMONIC_MOVES = { "MOVES", &OPCODE_MOVES, NULL, NULL };
MNEOMONIC MNEMONIC_MOVEQ = { "MOVEQ", &OPCODE_MOVEQ, &MNEMONIC_MOVEP, &MNEMONIC_MOVES };
MNEOMONIC MNEMONIC_MULU = { "MULU", &OPCODE_MULU, NULL, NULL };
MNEOMONIC MNEMONIC_NEG = { "NEG", &OPCODE_NEG, NULL, NULL };
MNEOMONIC MNEMONIC_NBCD = { "NBCD", &OPCODE_NBCD, &MNEMONIC_MULU, &MNEMONIC_NEG };
MNEOMONIC MNEMONIC_MULS = { "MULS", &OPCODE_MULS, &MNEMONIC_MOVEQ, &MNEMONIC_NBCD };
MNEOMONIC MNEMONIC_MOVEM = { "MOVEM", &OPCODE_MOVEM, &MNEMONIC_LSR, &MNEMONIC_MULS };
MNEOMONIC MNEMONIC_NOP = { "NOP", &OPCODE_NOP, NULL, NULL };
MNEOMONIC MNEMONIC_OR = { "OR", &OPCODE_OR, NULL, NULL };
MNEOMONIC MNEMONIC_NOT = { "NOT", &OPCODE_NOT, &MNEMONIC_NOP, &MNEMONIC_OR };
MNEOMONIC MNEMONIC_PEA = { "PEA", &OPCODE_PEA, NULL, NULL };
MNEOMONIC MNEMONIC_ROL = { "ROL", &OPCODE_ROL, NULL, NULL };
MNEOMONIC MNEMONIC_RESET = { "RESET", &OPCODE_RESET, &MNEMONIC_PEA, &MNEMONIC_ROL };
MNEOMONIC MNEMONIC_ORI = { "ORI", &OPCODE_ORI, &MNEMONIC_NOT, &MNEMONIC_RESET };
MNEOMONIC MNEMONIC_ROXL = { "ROXL", &OPCODE_ROXL, NULL, NULL };
MNEOMONIC MNEMONIC_RTD = { "RTD", &OPCODE_RTD, NULL, NULL };
MNEOMONIC MNEMONIC_ROXR = { "ROXR", &OPCODE_ROXR, &MNEMONIC_ROXL, &MNEMONIC_RTD };
MNEOMONIC MNEMONIC_RTR = { "RTR", &OPCODE_RTR, NULL, NULL };
MNEOMONIC MNEMONIC_SBCD = { "SBCD", &OPCODE_SBCD, NULL, NULL };
MNEOMONIC MNEMONIC_RTS = { "RTS", &OPCODE_RTS, &MNEMONIC_RTR, &MNEMONIC_SBCD };
MNEOMONIC MNEMONIC_RTE = { "RTE", &OPCODE_RTE, &MNEMONIC_ROXR, &MNEMONIC_RTS };
MNEOMONIC MNEMONIC_ROR = { "ROR", &OPCODE_ROR, &MNEMONIC_ORI, &MNEMONIC_RTE };
MNEOMONIC MNEMONIC_NEGX = { "NEGX", &OPCODE_NEGX, &MNEMONIC_MOVEM, &MNEMONIC_ROR };
MNEOMONIC MNEMONIC_SCS = { "SCS", &OPCODE_SCS, NULL, NULL };
MNEOMONIC MNEMONIC_SF = { "SF", &OPCODE_SF, NULL, NULL };
MNEOMONIC MNEMONIC_SEQ = { "SEQ", &OPCODE_SEQ, &MNEMONIC_SCS, &MNEMONIC_SF };
MNEOMONIC MNEMONIC_SGT = { "SGT", &OPCODE_SGT, NULL, NULL };
MNEOMONIC MNEMONIC_SHS = { "SHS", &OPCODE_SHS, NULL, NULL };
MNEOMONIC MNEMONIC_SHI = { "SHI", &OPCODE_SHI, &MNEMONIC_SGT, &MNEMONIC_SHS };
MNEOMONIC MNEMONIC_SGE = { "SGE", &OPCODE_SGE, &MNEMONIC_SEQ, &MNEMONIC_SHI };
MNEOMONIC MNEMONIC_SLO = { "SLO", &OPCODE_SLO, NULL, NULL };
MNEOMONIC MNEMONIC_SLT = { "SLT", &OPCODE_SLT, NULL, NULL };
MNEOMONIC MNEMONIC_SLS = { "SLS", &OPCODE_SLS, &MNEMONIC_SLO, &MNEMONIC_SLT };
MNEOMONIC MNEMONIC_SNE = { "SNE", &OPCODE_SNE, NULL, NULL };
MNEOMONIC MNEMONIC_ST = { "ST", &OPCODE_ST, NULL, NULL };
MNEOMONIC MNEMONIC_SPL = { "SPL", &OPCODE_SPL, &MNEMONIC_SNE, &MNEMONIC_ST };
MNEOMONIC MNEMONIC_SMI = { "SMI", &OPCODE_SMI, &MNEMONIC_SLS, &MNEMONIC_SPL };
MNEOMONIC MNEMONIC_SLE = { "SLE", &OPCODE_SLE, &MNEMONIC_SGE, &MNEMONIC_SMI };
MNEOMONIC MNEMONIC_SUB = { "SUB", &OPCODE_SUB, NULL, NULL };
MNEOMONIC MNEMONIC_SUBI = { "SUBI", &OPCODE_SUBI, NULL, NULL };
MNEOMONIC MNEMONIC_SUBA = { "SUBA", &OPCODE_SUBA, &MNEMONIC_SUB, &MNEMONIC_SUBI };
MNEOMONIC MNEMONIC_SUBX = { "SUBX", &OPCODE_SUBX, NULL, NULL };
MNEOMONIC MNEMONIC_SVS = { "SVS", &OPCODE_SVS, NULL, NULL };
MNEOMONIC MNEMONIC_SVC = { "SVC", &OPCODE_SVC, &MNEMONIC_SUBX, &MNEMONIC_SVS };
MNEOMONIC MNEMONIC_SUBQ = { "SUBQ", &OPCODE_SUBQ, &MNEMONIC_SUBA, &MNEMONIC_SVC };
MNEOMONIC MNEMONIC_TAS = { "TAS", &OPCODE_TAS, NULL, NULL };
MNEOMONIC MNEMONIC_TRAPV = { "TRAPV", &OPCODE_TRAPV, NULL, NULL };
MNEOMONIC MNEMONIC_TRAP = { "TRAP", &OPCODE_TRAP, &MNEMONIC_TAS, &MNEMONIC_TRAPV };
MNEOMONIC MNEMONIC_UNLK = { "UNLK", &OPCODE_UNLK, NULL, NULL };
MNEOMONIC MNEMONIC_XORI = { "XORI", &OPCODE_XORI, NULL, NULL };
MNEOMONIC MNEMONIC_XOR = { "XOR", &OPCODE_XOR, &MNEMONIC_UNLK, &MNEMONIC_XORI };
MNEOMONIC MNEMONIC_TST = { "TST", &OPCODE_TST, &MNEMONIC_TRAP, &MNEMONIC_XOR };
MNEOMONIC MNEMONIC_SWAP = { "SWAP", &OPCODE_SWAP, &MNEMONIC_SUBQ, &MNEMONIC_TST };
MNEOMONIC MNEMONIC_STOP = { "STOP", &OPCODE_STOP, &MNEMONIC_SLE, &MNEMONIC_SWAP };
MNEOMONIC MNEMONIC_SCC = { "SCC", &OPCODE_SCC, &MNEMONIC_NEGX, &MNEMONIC_STOP };
MNEOMONIC MNEMONIC_JMP = { "JMP", &OPCODE_JMP, &MNEMONIC_BGT, &MNEMONIC_SCC };


#define ROOT_NODE OPCODE_MOVE

//=================================================
//=================================================

OPCODE* FIND_OPCODE(char* MATCH, int LEN);
int PASS_FILE(FILE* SOURCE);
char* PROC_INPUT(int LINE, char* BUFFER);
int NEXT_SYM(char** PTR, DIRECTIVE_SYM* SYM);

void NEXT_LINE(int LINE, char* SOURCE);
void SET_ADDRESS(U32 ADDRESS);
void SET_START(U32 ADDRESS);
void ADD_BYTE(U8 DATA);
void END_OUTPUT(void);

#endif
#endif
