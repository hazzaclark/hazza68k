/* COPYRIGHT (C) HARRY CLARK 2024 */

/* MOTOROLA 68000 ASSEMBLER */

/* THIS FILE HOUSES THE NECESSITIES FOR THE ASSEMBLY PROCESS */
/* FOCUSSING ON THE BACKEND OF THE ASSEMBLER */

#ifndef DISASSEMBLY
#define DISASSEMBLY

/* NESTED INCLUDES */

#include "common.h"

/* SYSTEM INCLUDES */

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <malloc.h>

#if defined(USE_DISASM)
#define USE_DISASM
#else
#define USE_DISASM

#define     SIZE_BYTE       0x01
#define     SIZE_SHORT      0x02
#define     SIZE_WORD       0x03
#define     SIZE_LONG       0x04
#define     SIZE_UNDEF      0x00

#define SIZE_WL   (SIZE_WORD | SIZE_LONG)
#define SIZE_BWL  (SIZE_BYTE | SIZE_WORD | SIZE_LONG)

#define		MAX_CHAR		32
#define		MAX_BIT_ARGS	256

#define NO_ARGUMENT             0x000000
#define EA_DREG                 0x000001
#define EA_AREG                 0x000002
#define EA_AREG_IND            0x000004
#define EA_AREG_IND_INC        0x000008
#define EA_AREG_DEC_IND        0x000010
#define EA_AREG_IND_DISP       0x000020
#define EA_AREG_IND_DISP_REG   0x000040
#define EA_ABS_SHORT_IND       0x000080
#define EA_ABS_LONG_IND        0x000100
#define EA_PC_IND_DISP         0x000200
#define EA_PC_IND_DISP_REG     0x000400
#define EA_IMMEDIATE           0x000800
#define EA_STATUS_REG          0x001000
#define EA_FLAGS_REG           0x002000
#define REGISTER_LIST          0x004000
#define ABS_ADDRESS            0x008000
#define UNUSED                 0x010000
#define NUM_DREG               0x020000
#define NUM_AREG               0x040000
#define NUM_AREG_DEC_IND       0x080000
#define NUM_AREG_IND_INC       0x100000
#define NUM_IMMEDIATE_3BIT     0x200000
#define NUM_IMMEDIATE_QUICK    0x400000
#define NUM_IMMEDIATE_5BIT     0x800000
#define NUM_IMMEDIATE_4        0x1000000
#define NUM_IMMEDIATE_8        0x2000000
#define NUM_IMMEDIATE_16       0x4000000
#define CONTROL_REG            0x8000000

#define EA_SOURCE_ARG	(EA_DREG|EA_AREG|EA_AREG_IND|EA_AREG_IND_INC|EA_AREG_DEC_IND|EA_AREG_IND_DISP|EA_AREG_IND_DISP_REG|EA_ABS_SHORT_IND|EA_ABS_LONG_IND|EA_PC_IND_DISP|EA_PC_IND_DISP_REG|EA_IMMEDIATE)
#define EA_DEST_ARG		(EA_DREG|EA_AREG_IND|EA_AREG_IND_INC|EA_AREG_DEC_IND|EA_AREG_IND_DISP|EA_AREG_IND_DISP_REG|EA_ABS_SHORT_IND|EA_ABS_LONG_IND)
#define EA_MEMORY_ARG	(EA_AREG_IND|EA_AREG_IND_INC|EA_AREG_DEC_IND|EA_AREG_IND_DISP|EA_AREG_IND_DISP_REG|EA_ABS_SHORT_IND|EA_ABS_LONG_IND)
#define EA_ADDRESS_ARG	(EA_AREG_IND|EA_AREG_IND_DISP|EA_AREG_IND_DISP_REG|EA_ABS_SHORT_IND|EA_ABS_LONG_IND|EA_PC_IND_DISP|EA_PC_IND_DISP_REG)

#if defined(TYPE_ARGS)
#define TYPE_ARGS
#else
#define TYPE_ARGS

extern UNK* TYPE;

#define     CREATE_TYPE(VALUE) \
static TYPE* ARBITARY_TYPE ## VALUE(TYPE* NODE); \


#define 		M68K_BOOL_FORMAT		"%d"
#define			M68K_BYTE_FORMAT		"%02x"	
#define			M68K_WORD_FORMAT		"%04x"
#define			M68K_LONG_FORMAT		"%08x"


#define 		PERIOD        '.'
#define 		PLUS        '+'
#define 		MINUS        '-'
#define 		OPAREN        '('
#define 		CPAREN        ')'
#define 		COMMA        ','
#define 		DOLLAR        '$'
#define 		PERCENT        '%'
#define 		HASH        '#'
#define 		COLON        ':'
#define 		SEMICOLON    ';'
#define 		ASTERIX        '*'
#define 		SLASH        '/'
#define 		UNDERSCORE    '_'
#define 		QUOTE        '\''
#define 		QUOTES        '"'
#define 		ESCAPE        '\\'
#define 		AMPERSAND    '&'
#define 		PIPE        '|'
#define 		HAT        '^'
#define 		BANG        '!'

typedef enum CONDITION
{
    CONDITION_TRUE,
	CONDITION_FALSE,
	CONDITION_HIGHER,
	CONDITION_LOWER_OR_SAME,
	CONDITION_CARRY_CLEAR,
	CONDITION_CARRY_SET,
	CONDITION_NOT_EQUAL,
	CONDITION_EQUAL,
	CONDITION_OVERFLOW_CLEAR,
	CONDITION_OVERFLOW_SET,
	CONDITION_PLUS,
	CONDITION_MINUS,
	CONDITION_GREATER_OR_EQUAL,
	CONDITION_LESS_THAN,
	CONDITION_GREATER_THAN,
	CONDITION_LESS_OR_EQUAL

} CONDITION;


#define			OPERAND_NONE																	 0
#define			OPERAND_DATA_REGISTER														1 << 0
#define			OPERAND_ADDRESS_REGISTER													1 << 1
#define			OPERAND_ADDRESS_REGISTER_IND												1 << 2
#define			OPERAND_ADDRESS_REGISTER_IND_POSTINCREMENT									1 << 3
#define			OPERAND_ADDRESS_REGISTER_IND_PREDECREMENT									1 << 4
#define			OPERAND_ADDRESS_REGISTER_IND_W_DISP											1 << 5
#define			OPERAND_ADDRESS_REGISTER_IND_W_DISP_INDEX_REG								1 << 6
#define			OPERAND_ADDRESS_BASE														1 << 7
#define			OPERAND_ADDRESS_ABSOLUTE													1 << 8
#define			OPERAND_LITERAL																1 << 9
#define			OPERAND_PC_W_DISP															1 << 10
#define			OPERAND_PC_W_DISP_INDEX_REG													1 << 11
#define			OPERAND_STATUS_REGISTER_BASE												1 << 12
#define			OPERAND_CONDITION_CODE_REG_BASE												1 << 13
#define			OPERAND_USER_STACK_POINTER_REG_BASE											1 << 14
#define			OPERAND_REGISTER_LIST														1 << 15	

typedef enum EXPRESSION_TYPE
{
    EXPRESSION_SUBTRACT,
	EXPRESSION_ADD,
	EXPRESSION_MULTIPLY,
	EXPRESSION_DIVIDE,
	EXPRESSION_MODULO,
	EXPRESSION_NEGATE,
	EXPRESSION_LOGICAL_NOT,
	EXPRESSION_LOGICAL_OR,
	EXPRESSION_LOGICAL_AND,
	EXPRESSION_BITWISE_NOT,
	EXPRESSION_BITWISE_OR,
	EXPRESSION_BITWISE_XOR,
	EXPRESSION_BITWISE_AND,
	EXPRESSION_EQUALITY,
	EXPRESSION_INEQUALITY,
	EXPRESSION_LESS_THAN,
	EXPRESSION_LESS_OR_EQUAL,
	EXPRESSION_MORE_THAN,
	EXPRESSION_MORE_OR_EQUAL,
	EXPRESSION_LEFT_SHIFT,
	EXPRESSION_RIGHT_SHIFT,
	EXPRESSION_NUMBER,
	EXPRESSION_IDENTIFIER,
	EXPRESSION_STRING,
	EXPRESSION_PROGRAM_COUNTER_OF_STATEMENT,
	EXPRESSION_PROGRAM_COUNTER_OF_EXPRESSION,
	EXPRESSION_STRLEN,
	EXPRESSION_DEF

} EXPRESSION_TYPE;


typedef enum EA_MODE
{
	EA_MODE_DREG,
	EA_MODE_AREG,
	EA_MODE_AREG_IND,
	EA_MODE_AREG_IND_INC,
	EA_MODE_AREG_IND_DEC,
	EA_MODE_AREG_IND_DISP,
	EA_MODE_AREG_IND_DISP_REG,
	EA_MODE_ABS_SHORT_IND,
	EA_MODE_ABS_LONG_IND,
	EA_MODE_PC_IND_DISP,
	EA_MODE_PC_IND_DISP_REG,
	EA_IMM,
	EA_STAT_REG,
	EA_FLAGS,

	EA_NUM_DREG,
	EA_NUM_AREG,
	EA_NUM_AREG_IND_INC
	
} EA_MODE;

typedef enum DIRECTIVES
{
	NONE = 0,
	ERROR,
	SYM_IDENTIFIER,
	SYM_OPCODE,
	ADDRESS_REG,
	DATA_REG, 
	FPU_REG,
	REG_LIST,
	NUMBER,
	REAL_FPNUM,
	CHAR,
	STRING,
	EXP,

	PC,
	SR,
	CCR,
	USP,
	VBR,
	SFC,
	DFC,

	BYTE,
	WORD,
	LONG,
	TEXT,
	DATA,
	BSS,
	ORG,
	START,
	ALIGN,
	EQU,
	END,
	DC, DS,

	MUL,
	DIV,
	MOD,
	AND,
	OR,
	EOR,
	NOT,
	ADDRESS

} DIRECTIVES;


#endif
#endif
#endif
