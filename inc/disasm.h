/* COPYRIGHT (C) HARRY CLARK 2024 */

/* MOTOROLA 68000 ASSEMBLER */

/* THIS FILE HOUSES THE NECESSITIES FOR THE ASSEMBLY PROCESS */
/* FOCUSSING ON THE BACKEND OF THE ASSEMBLER */

#ifndef DISASSEMBLY
#define DISASSEMBLY

/* NESTED INCLUDES */

#include "assemble.h"
#include "common.h"

/* SYSTEM INCLUDES */

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <malloc.h>

#if defined(USE_DISASM)
#define USE_DISASM
#else
#define USE_DISASM

#define     SIZE_BYTE       0x01
#define     SIZE_SHORT      0x02
#define     SIZE_WORD       0x03
#define     SIZE_LONG       0x04
#define     SIZE_UNDEF      0x00

#define SIZE_WL   (SIZE_WORD | SIZE_LONG)
#define SIZE_BWL  (SIZE_BYTE | SIZE_WORD | SIZE_LONG)

#define		MAX_CHAR		32
#define		MAX_BIT_ARGS	256

#define NO_ARGUMENT             0x000000
#define EA_DREG                 0x000001
#define EA_AREG                 0x000002
#define EA_AREG_IND            0x000004
#define EA_AREG_IND_INC        0x000008
#define EA_AREG_DEC_IND        0x000010
#define EA_AREG_IND_DISP       0x000020
#define EA_AREG_IND_DISP_REG   0x000040
#define EA_ABS_SHORT_IND       0x000080
#define EA_ABS_LONG_IND        0x000100
#define EA_PC_IND_DISP         0x000200
#define EA_PC_IND_DISP_REG     0x000400
#define EA_IMMEDIATE           0x000800
#define EA_STATUS_REG          0x001000
#define EA_FLAGS_REG           0x002000
#define REGISTER_LIST          0x004000
#define ABS_ADDRESS            0x008000
#define UNUSED                 0x010000
#define NUM_DREG               0x020000
#define NUM_AREG               0x040000
#define NUM_AREG_DEC_IND       0x080000
#define NUM_AREG_IND_INC       0x100000
#define NUM_IMMEDIATE_3BIT     0x200000
#define NUM_IMMEDIATE_QUICK    0x400000
#define NUM_IMMEDIATE_5BIT     0x800000
#define NUM_IMMEDIATE_4        0x1000000
#define NUM_IMMEDIATE_8        0x2000000
#define NUM_IMMEDIATE_16       0x4000000
#define CONTROL_REG            0x8000000

#define EA_SOURCE_ARG	(EA_DREG|EA_AREG|EA_AREG_IND|EA_AREG_IND_INC|EA_AREG_DEC_IND|EA_AREG_IND_DISP|EA_AREG_IND_DISP_REG|EA_ABS_SHORT_IND|EA_ABS_LONG_IND|EA_PC_IND_DISP|EA_PC_IND_DISP_REG|EA_IMMEDIATE)
#define EA_DEST_ARG		(EA_DREG|EA_AREG_IND|EA_AREG_IND_INC|EA_AREG_DEC_IND|EA_AREG_IND_DISP|EA_AREG_IND_DISP_REG|EA_ABS_SHORT_IND|EA_ABS_LONG_IND)
#define EA_MEMORY_ARG	(EA_AREG_IND|EA_AREG_IND_INC|EA_AREG_DEC_IND|EA_AREG_IND_DISP|EA_AREG_IND_DISP_REG|EA_ABS_SHORT_IND|EA_ABS_LONG_IND)
#define EA_ADDRESS_ARG	(EA_AREG_IND|EA_AREG_IND_DISP|EA_AREG_IND_DISP_REG|EA_ABS_SHORT_IND|EA_ABS_LONG_IND|EA_PC_IND_DISP|EA_PC_IND_DISP_REG)

#if defined(TYPE_ARGS)
#define TYPE_ARGS
#else
#define TYPE_ARGS

extern UNK* TYPE;

#define     CREATE_TYPE(VALUE) \
static TYPE* ARBITARY_TYPE ## VALUE(TYPE* NODE); \


#define 		M68K_BOOL_FORMAT		"%d"
#define			M68K_BYTE_FORMAT		"%02x"	
#define			M68K_WORD_FORMAT		"%04x"
#define			M68K_LONG_FORMAT		"%08x"


#define 		PERIOD        '.'
#define 		PLUS        '+'
#define 		MINUS        '-'
#define 		OPAREN        '('
#define 		CPAREN        ')'
#define 		COMMA        ','
#define 		DOLLAR        '$'
#define 		PERCENT        '%'
#define 		HASH        '#'
#define 		COLON        ':'
#define 		SEMICOLON    ';'
#define 		ASTERIX        '*'
#define 		SLASH        '/'
#define 		UNDERSCORE    '_'
#define 		QUOTE        '\''
#define 		QUOTES        '"'
#define 		ESCAPE        '\\'
#define 		AMPERSAND    '&'
#define 		PIPE        '|'
#define 		HAT        '^'
#define 		BANG        '!'

typedef enum CONDITION
{
    CONDITION_TRUE,
	CONDITION_FALSE,
	CONDITION_HIGHER,
	CONDITION_LOWER_OR_SAME,
	CONDITION_CARRY_CLEAR,
	CONDITION_CARRY_SET,
	CONDITION_NOT_EQUAL,
	CONDITION_EQUAL,
	CONDITION_OVERFLOW_CLEAR,
	CONDITION_OVERFLOW_SET,
	CONDITION_PLUS,
	CONDITION_MINUS,
	CONDITION_GREATER_OR_EQUAL,
	CONDITION_LESS_THAN,
	CONDITION_GREATER_THAN,
	CONDITION_LESS_OR_EQUAL

} CONDITION;

typedef enum OPCODE_TYPE
{
    OPCODE_ORI_TO_CCR,
	OPCODE_ORI_TO_SR,
	OPCODE_ORI,
	OPCODE_ANDI_TO_CCR,
	OPCODE_ANDI_TO_SR,
	OPCODE_ANDI,
	OPCODE_SUBI,
	OPCODE_ADDI,
	OPCODE_EORI_TO_CCR,
	OPCODE_EORI_TO_SR,
	OPCODE_EORI,
	OPCODE_CMPI,
	OPCODE_BTST_STATIC,
	OPCODE_BCHG_STATIC,
	OPCODE_BCLR_STATIC,
	OPCODE_BSET_STATIC,
	OPCODE_BTST_DYNAMIC,
	OPCODE_BCHG_DYNAMIC,
	OPCODE_BCLR_DYNAMIC,
	OPCODE_BSET_DYNAMIC,
	OPCODE_MOVEP_TO_REG,
	OPCODE_MOVEP_FROM_REG,
	OPCODE_MOVEA,
	OPCODE_MOVE,
	OPCODE_MOVE_FROM_SR,
	OPCODE_MOVE_TO_CCR,
	OPCODE_MOVE_TO_SR,
	OPCODE_NEGX,
	OPCODE_CLR,
	OPCODE_NEG,
	OPCODE_NOT,
	OPCODE_EXT,
	OPCODE_NBCD,
	OPCODE_SWAP,
	OPCODE_PEA,
	OPCODE_ILLEGAL,
	OPCODE_TAS,
	OPCODE_TST,
	OPCODE_TRAP,
	OPCODE_LINK,
	OPCODE_UNLK,
	OPCODE_MOVE_TO_USP,
	OPCODE_MOVE_FROM_USP,
	OPCODE_RESET,
	OPCODE_NOP,
	OPCODE_STOP,
	OPCODE_RTE,
	OPCODE_RTS,
	OPCODE_TRAPV,
	OPCODE_RTR,
	OPCODE_JSR,
	OPCODE_JMP,
	OPCODE_MOVEM_TO_REGS,
	OPCODE_MOVEM_FROM_REGS,
	OPCODE_LEA,
	OPCODE_CHK,
	OPCODE_ADDQ,
	OPCODE_SUBQ,
	OPCODE_Scc,
	OPCODE_DBcc,
	OPCODE_BRA,
	OPCODE_BSR,
	OPCODE_Bcc,
	OPCODE_MOVEQ,
	OPCODE_DIVU,
	OPCODE_DIVS,
	OPCODE_SBCD_DATA_REGS,
	OPCODE_SBCD_ADDRESS_REGS,
	OPCODE_OR_TO_REG,
	OPCODE_OR_FROM_REG,
	OPCODE_SUB_TO_REG,
	OPCODE_SUB_FROM_REG,
	OPCODE_SUBX_DATA_REGS,
	OPCODE_SUBX_ADDRESS_REGS,
	OPCODE_SUBA,
	OPCODE_EOR,
	OPCODE_CMPM,
	OPCODE_CMP,
	OPCODE_CMPA,
	OPCODE_MULU,
	OPCODE_MULS,
	OPCODE_ABCD_DATA_REGS,
	OPCODE_ABCD_ADDRESS_REGS,
	OPCODE_EXG,
	OPCODE_AND_TO_REG,
	OPCODE_AND_FROM_REG,
	OPCODE_ADD_TO_REG,
	OPCODE_ADD_FROM_REG,
	OPCODE_ADDX_DATA_REGS,
	OPCODE_ADDX_ADDRESS_REGS,
	OPCODE_ADDA,
	OPCODE_ASL_STATIC,
	OPCODE_ASR_STATIC,
	OPCODE_LSL_STATIC,
	OPCODE_LSR_STATIC,
	OPCODE_ROXL_STATIC,
	OPCODE_ROXR_STATIC,
	OPCODE_ROL_STATIC,
	OPCODE_ROR_STATIC,
	OPCODE_ASL_DYNAMIC,
	OPCODE_ASR_DYNAMIC,
	OPCODE_LSL_DYNAMIC,
	OPCODE_LSR_DYNAMIC,
	OPCODE_ROXL_DYNAMIC,
	OPCODE_ROXR_DYNAMIC,
	OPCODE_ROL_DYNAMIC,
	OPCODE_ROR_DYNAMIC,
	OPCODE_ASL_SINGLE,
	OPCODE_ASR_SINGLE,
	OPCODE_LSL_SINGLE,
	OPCODE_LSR_SINGLE,
	OPCODE_ROXL_SINGLE,
	OPCODE_ROXR_SINGLE,
	OPCODE_ROL_SINGLE,
	OPCODE_ROR_SINGLE

} OPCODE_TYPE;

#define			OPERAND_NONE																	 0
#define			OPERAND_DATA_REGISTER														1 << 0
#define			OPERAND_ADDRESS_REGISTER													1 << 1
#define			OPERAND_ADDRESS_REGISTER_IND												1 << 2
#define			OPERAND_ADDRESS_REGISTER_IND_POSTINCREMENT									1 << 3
#define			OPERAND_ADDRESS_REGISTER_IND_PREDECREMENT									1 << 4
#define			OPERAND_ADDRESS_REGISTER_IND_W_DISP											1 << 5
#define			OPERAND_ADDRESS_REGISTER_IND_W_DISP_INDEX_REG								1 << 6
#define			OPERAND_ADDRESS_BASE														1 << 7
#define			OPERAND_ADDRESS_ABSOLUTE													1 << 8
#define			OPERAND_LITERAL																1 << 9
#define			OPERAND_PC_W_DISP															1 << 10
#define			OPERAND_PC_W_DISP_INDEX_REG													1 << 11
#define			OPERAND_STATUS_REGISTER_BASE												1 << 12
#define			OPERAND_CONDITION_CODE_REG_BASE												1 << 13
#define			OPERAND_USER_STACK_POINTER_REG_BASE											1 << 14
#define			OPERAND_REGISTER_LIST														1 << 15	

typedef enum EXPRESSION_TYPE
{
    EXPRESSION_SUBTRACT,
	EXPRESSION_ADD,
	EXPRESSION_MULTIPLY,
	EXPRESSION_DIVIDE,
	EXPRESSION_MODULO,
	EXPRESSION_NEGATE,
	EXPRESSION_LOGICAL_NOT,
	EXPRESSION_LOGICAL_OR,
	EXPRESSION_LOGICAL_AND,
	EXPRESSION_BITWISE_NOT,
	EXPRESSION_BITWISE_OR,
	EXPRESSION_BITWISE_XOR,
	EXPRESSION_BITWISE_AND,
	EXPRESSION_EQUALITY,
	EXPRESSION_INEQUALITY,
	EXPRESSION_LESS_THAN,
	EXPRESSION_LESS_OR_EQUAL,
	EXPRESSION_MORE_THAN,
	EXPRESSION_MORE_OR_EQUAL,
	EXPRESSION_LEFT_SHIFT,
	EXPRESSION_RIGHT_SHIFT,
	EXPRESSION_NUMBER,
	EXPRESSION_IDENTIFIER,
	EXPRESSION_STRING,
	EXPRESSION_PROGRAM_COUNTER_OF_STATEMENT,
	EXPRESSION_PROGRAM_COUNTER_OF_EXPRESSION,
	EXPRESSION_STRLEN,
	EXPRESSION_DEF

} EXPRESSION_TYPE;


typedef enum EA_MODE
{
	EA_MODE_DREG,
	EA_MODE_AREG,
	EA_MODE_AREG_IND,
	EA_MODE_AREG_IND_INC,
	EA_MODE_AREG_IND_DEC,
	EA_MODE_AREG_IND_DISP,
	EA_MODE_AREG_IND_DISP_REG,
	EA_MODE_ABS_SHORT_IND,
	EA_MODE_ABS_LONG_IND,
	EA_MODE_PC_IND_DISP,
	EA_MODE_PC_IND_DISP_REG,
	EA_IMM,
	EA_STAT_REG,
	EA_FLAGS,

	EA_NUM_DREG,
	EA_NUM_AREG,
	EA_NUM_AREG_IND_INC
	
} EA_MODE;

typedef enum DIRECTIVES
{
	NONE = 0,
	ERROR,
	IDENTIFIER,
	SYM_OPCODE,
	ADDRESS_REG,
	DATA_REG, 
	FPU_REG,
	REG_LIST,
	NUMBER,
	REAL_FPNUM,
	CHAR,
	STRING,
	EXP,

	PC,
	SR,
	CCR,
	USP,
	VBR,
	SFC,
	DFC,

	BYTE,
	WORD,
	LONG,
	TEXT,
	DATA,
	BSS,
	ORG,
	START,
	ALIGN,
	EQU,
	END,
	DC, DS,

	MUL,
	DIV,
	MOD,
	AND,
	OR,
	EOR,
	NOT,
	ADDRESS

} DIRECTIVES;

//===============================================================================
//						68K OPCODE AND MNENOMIC DEFS.
//
//		THE FOLLOWING IS A MASSIVE LIST PERTAINING TOWARDS EACH INDIVIDUAL
// 					OPCODE AND MNENOMIC DEF AND EXPRESSION - 
//					INSPIRED HEAVILY FROM ASM68K AND SNASM68K
//===============================================================================

static OPCODE OPCODE_ABCD = { SIZE_BYTE, "OPCODE_ABCD", NUM_AREG_DEC_IND | NUM_AREG_DEC_IND, 0xC108, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_ADD = { SIZE_BYTE, "OPCODE_ADD", NUM_DREG | NUM_DREG, 0xC100, 0x0000, 0, 0, &OPCODE_ABCD };
static OPCODE OPCODE_ADDI = { SIZE_BWL, "OPCODE_ADDI", EA_SOURCE_ARG | NUM_DREG, 0xD000, 0x0000, 6, 0, NULL };
static OPCODE OPCODE_ADDA = { SIZE_BWL, "OPCODE_ADDA", NUM_DREG | EA_MEMORY_ARG, 0xD100, 0x0000, 6, 9, &OPCODE_ADDI };
static OPCODE OPCODE_ADDX = { SIZE_BWL, "OPCODE_ADDX", EA_IMMEDIATE | EA_DEST_ARG, 0x0600, 0x0000, 6, 0, NULL };
static OPCODE OPCODE_ANDI = { SIZE_WL, "OPCODE_ANDI", EA_SOURCE_ARG | NUM_AREG, 0xD0C0, 0x0000, 8, 0, NULL };
static OPCODE OPCODE_AND = { SIZE_BWL, "OPCODE_AND", NUM_AREG_DEC_IND | NUM_AREG_DEC_IND, 0xD108, 0x0000, 6, 9, NULL };
static OPCODE OPCODE_ADDQ = { SIZE_BWL, "OPCODE_ADDQ", NUM_IMMEDIATE_QUICK | EA_DEST_ARG | EA_AREG, 0x5000, 0x0000, 6, 9, NULL };
static OPCODE OPCODE_ASR = { SIZE_BWL, "OPCODE_ASR", NUM_IMMEDIATE_QUICK | NUM_DREG, 0xE000, 0x0000, 6, 9, &OPCODE_AND };
static OPCODE OPCODE_BCC = { SIZE_UNDEF, "OPCODE_BCC", ABS_ADDRESS | NO_ARGUMENT, 0x6400, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_BCS = { SIZE_UNDEF, "OPCODE_BCS", ABS_ADDRESS | NO_ARGUMENT, 0x6500, 0x0000, 0, 0, &OPCODE_BCC };
static OPCODE OPCODE_BGE = { SIZE_UNDEF, "OPCODE_BGE", ABS_ADDRESS | NO_ARGUMENT, 0x6C00, 0x0000, 0, 0, &OPCODE_BCS };
static OPCODE OPCODE_BEQ = { SIZE_UNDEF, "OPCODE_BEQ", ABS_ADDRESS | NO_ARGUMENT, 0x6700, 0x0000, 0, 0, &OPCODE_BGE };
static OPCODE OPCODE_ASL = { SIZE_BWL, "OPCODE_ASL", NUM_IMMEDIATE_QUICK | NUM_DREG, 0xE100, 0x0000, 6, 9, &OPCODE_BEQ };
static OPCODE OPCODE_BHI = { SIZE_UNDEF, "OPCODE_BHI", ABS_ADDRESS | NO_ARGUMENT, 0x6200, 0x0000, 0, 0, &OPCODE_ASL };
static OPCODE OPCODE_BGT = { SIZE_UNDEF, "OPCODE_BGT", ABS_ADDRESS | NO_ARGUMENT, 0x6E00, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_BLE = { SIZE_UNDEF, "OPCODE_BLE", ABS_ADDRESS | NO_ARGUMENT, 0x6F00, 0x0000, 0, 0, &OPCODE_BHI };
static OPCODE OPCODE_BHS = { SIZE_UNDEF, "OPCODE_BHS", ABS_ADDRESS | NO_ARGUMENT, 0x6400, 0x0000, 0, 0, &OPCODE_BLE };
static OPCODE OPCODE_BLS = { SIZE_UNDEF, "OPCODE_BLS", ABS_ADDRESS | NO_ARGUMENT, 0x6300, 0x0000, 0, 0, &OPCODE_BHS };
static OPCODE OPCODE_BMI = { SIZE_UNDEF, "OPCODE_BMI", ABS_ADDRESS | NO_ARGUMENT, 0x6B00, 0x0000, 0, 0, &OPCODE_BLS };
static OPCODE OPCODE_BLT = { SIZE_UNDEF, "OPCODE_BLT", ABS_ADDRESS | NO_ARGUMENT, 0x6D00, 0x0000, 0, 0, &OPCODE_BMI };
static OPCODE OPCODE_BLO = { SIZE_UNDEF, "OPCODE_BLO", ABS_ADDRESS | NO_ARGUMENT, 0x6500, 0x0000, 0, 0, &OPCODE_BLT };
static OPCODE OPCODE_BPL = { SIZE_UNDEF, "OPCODE_BPL", ABS_ADDRESS | NO_ARGUMENT, 0x6A00, 0x0000, 0, 0, &OPCODE_BLO };
static OPCODE OPCODE_BTST = { SIZE_LONG, "OPCODE_BTST", NUM_DREG | EA_DREG, 0x0100, 0x0000, 0, 0, &OPCODE_BPL };
static OPCODE OPCODE_BVS = { SIZE_UNDEF, "OPCODE_BVS", ABS_ADDRESS | NO_ARGUMENT, 0x6B00, 0x0000, 0, 0, &OPCODE_BTST };
static OPCODE OPCODE_BVC = { SIZE_UNDEF, "OPCODE_BVC", ABS_ADDRESS | NO_ARGUMENT, 0x6800, 0x0000, 0, 0, &OPCODE_BVS };
static OPCODE OPCODE_CMPA = { SIZE_WL, "OPCODE_CMPA", EA_SOURCE_ARG | NUM_AREG, 0xB108, 0x0000, 6, 9, &OPCODE_BVC };
static OPCODE OPCODE_CMP = { SIZE_BWL, "OPCODE_CMP", NUM_DREG | EA_MEMORY_ARG, 0xB100, 0x0000, 6, 9, &OPCODE_CMPA };
static OPCODE OPCODE_CMPM = { SIZE_BWL, "OPCODE_CMPM", EA_AREG_IND_INC | EA_AREG_IND_INC, 0xB148, 0x0000, 6, 9, &OPCODE_CMP };
static OPCODE OPCODE_DBCS = { SIZE_UNDEF, "OPCODE_DBCS", NUM_DREG | ABS_ADDRESS, 0x51C8, 0x0000, 0, 0, &OPCODE_CMPM };
static OPCODE OPCODE_DBCC = { SIZE_UNDEF, "OPCODE_DBCC", NUM_DREG | ABS_ADDRESS, 0x51C0, 0x0000, 0, 0, &OPCODE_DBCS };
static OPCODE OPCODE_BCHG = { SIZE_LONG, "OPCODE_BCHG", NUM_DREG | EA_DREG, 0x0140, 0x0000, 0, 9, NULL };
static OPCODE OPCODE_BCLR = { SIZE_BYTE, "OPCODE_BCLR", NUM_IMMEDIATE_3BIT | EA_MEMORY_ARG, 0x0840, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_BSET = { SIZE_LONG, "OPCODE_BSET", NUM_IMMEDIATE_5BIT | EA_DREG, 0x0840, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_BRA = { SIZE_UNDEF, "OPCODE_BRA", ABS_ADDRESS | NO_ARGUMENT, 0x6000, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_BSR = { SIZE_UNDEF, "OPCODE_BSR", ABS_ADDRESS | NO_ARGUMENT, 0x6100, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_BNE = { SIZE_UNDEF, "OPCODE_BNE", ABS_ADDRESS | NO_ARGUMENT, 0x6600, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_CLR = { SIZE_BWL, "OPCODE_CLR", EA_DEST_ARG | NO_ARGUMENT, 0x4200, 0x0000, 6, 0, NULL };
static OPCODE OPCODE_CMPI = { SIZE_BWL, "OPCODE_CMPI", EA_IMMEDIATE | EA_DEST_ARG, 0x0C00, 0x0000, 6, 0, NULL };
static OPCODE OPCODE_DIVS = { SIZE_WORD, "OPCODE_DIVS", EA_SOURCE_ARG | NUM_DREG, 0x81C0, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_DIVU = { SIZE_WORD, "OPCODE_DIVU", EA_SOURCE_ARG | NUM_DREG, 0x80C0, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_DBF = { SIZE_UNDEF, "OPCODE_DBF", NUM_DREG | ABS_ADDRESS, 0x51C8, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_DBGT = { SIZE_UNDEF, "OPCODE_DBGT", NUM_DREG | ABS_ADDRESS, 0x51C8, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_DBGE = { SIZE_UNDEF, "OPCODE_DBGE", NUM_DREG | ABS_ADDRESS, 0x51C8, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_DBHS = { SIZE_UNDEF, "OPCODE_DBHS", NUM_DREG | ABS_ADDRESS, 0x51C8, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_DBLO = { SIZE_UNDEF, "OPCODE_DBLO", NUM_DREG | ABS_ADDRESS, 0x51C8, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_DBLE = { SIZE_UNDEF, "OPCODE_DBLE", NUM_DREG | ABS_ADDRESS, 0x51C8, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_DBHI = { SIZE_UNDEF, "OPCODE_DBHI", NUM_DREG | ABS_ADDRESS, 0x51C8, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_DBEQ = { SIZE_UNDEF, "OPCODE_DBEQ", NUM_DREG | ABS_ADDRESS, 0x51C8, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_DBLT = { SIZE_UNDEF, "OPCODE_DBLT", NUM_DREG | ABS_ADDRESS, 0x51C8, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_DBNE = { SIZE_UNDEF, "OPCODE_DBNE", NUM_DREG | ABS_ADDRESS, 0x51C8, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_DBMI = { SIZE_UNDEF, "OPCODE_DBMI", NUM_DREG | ABS_ADDRESS, 0x51C8, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_DBRA = { SIZE_UNDEF, "OPCODE_DBRA", NUM_DREG | ABS_ADDRESS, 0x51C8, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_DBVC = { SIZE_UNDEF, "OPCODE_DBVC", NUM_DREG | ABS_ADDRESS, 0x51C8, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_DBT = { SIZE_UNDEF, "OPCODE_DBT", NUM_DREG | ABS_ADDRESS, 0x51C8, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_DBPL = { SIZE_UNDEF, "OPCODE_DBPL", NUM_DREG | ABS_ADDRESS, 0x51C8, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_DBVS = { SIZE_UNDEF, "OPCODE_DBVS", NUM_DREG | ABS_ADDRESS, 0x51C8, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_DBLS = { SIZE_UNDEF, "OPCODE_DBLS", NUM_DREG | ABS_ADDRESS, 0x51C8, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_EOR = { SIZE_BWL, "OPCODE_EOR", EA_SOURCE_ARG | NUM_DREG, 0xB180, 0x0000, 6, 0, NULL };
static OPCODE OPCODE_EORI = { SIZE_BWL, "OPCODE_EORI", EA_IMMEDIATE | EA_DEST_ARG, 0x0A00, 0x0000, 6, 0, NULL };
static OPCODE OPCODE_EXT = { SIZE_WL, "OPCODE_EXT", NUM_DREG | NO_ARGUMENT, 0x4800, 0x0000, 6, 0, NULL };
static OPCODE OPCODE_JMP = { SIZE_UNDEF, "OPCODE_JMP", EA_ADDRESS_ARG | NO_ARGUMENT, 0x4EC0, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_LSL = { SIZE_BWL, "OPCODE_LSL", NUM_IMMEDIATE_QUICK | NUM_DREG, 0xE108, 0x0000, 6, 9, NULL };
static OPCODE OPCODE_LSR = { SIZE_BWL, "OPCODE_LSR", NUM_IMMEDIATE_QUICK | NUM_DREG, 0xE008, 0x0000, 6, 9, NULL };
static OPCODE OPCODE_MOVEP = { SIZE_WL, "OPCODE_MOVEP", NUM_DREG | EA_AREG_IND_DISP, 0x0108, 0x0000, 6, 0, NULL };
static OPCODE OPCODE_MULS = { SIZE_WORD, "OPCODE_MULS", EA_SOURCE_ARG | NUM_DREG, 0xC1C0, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_NBCD = { SIZE_BYTE, "OPCODE_NBCD", EA_DEST_ARG | NO_ARGUMENT, 0x4800, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_NEGX = { SIZE_BWL, "OPCODE_NEGX", EA_DEST_ARG | NO_ARGUMENT, 0x4000, 0x0000, 6, 0, NULL };
static OPCODE OPCODE_NOT = { SIZE_BWL, "OPCODE_NOT", EA_DEST_ARG | NO_ARGUMENT, 0x4600, 0x0000, 6, 0, NULL };
static OPCODE OPCODE_ORI = { SIZE_BWL, "OPCODE_ORI", EA_IMMEDIATE | EA_DEST_ARG, 0x0000, 0x0000, 6, 0, NULL };
static OPCODE OPCODE_PEA = { SIZE_UNDEF, "OPCODE_PEA", EA_ADDRESS_ARG | NO_ARGUMENT, 0x4840, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_RESET = { SIZE_UNDEF, "OPCODE_RESET", NO_ARGUMENT | NO_ARGUMENT, 0x4E70, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_ROR = { SIZE_BWL, "OPCODE_ROR", NUM_DREG | NUM_DREG, 0xE038, 0x0000, 6, 9, NULL };
static OPCODE OPCODE_ROXL = { SIZE_BWL, "OPCODE_ROXL", NUM_DREG | NUM_DREG, 0xE130, 0x0000, 6, 9, NULL };
static OPCODE OPCODE_ROXR = { SIZE_BWL, "OPCODE_ROXR", NUM_DREG | NUM_DREG, 0xE030, 0x0000, 6, 9, NULL };
static OPCODE OPCODE_RTD = { SIZE_UNDEF, "OPCODE_RTD", NO_ARGUMENT | NO_ARGUMENT, 0x4E74, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_RTE = { SIZE_UNDEF, "OPCODE_RTE", NO_ARGUMENT | NO_ARGUMENT, 0x4E73, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_RTR = { SIZE_UNDEF, "OPCODE_RTR", NO_ARGUMENT | NO_ARGUMENT, 0x4E77, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_SBCD = { SIZE_BYTE, "OPCODE_SBCD", NUM_DREG | NUM_DREG, 0x8100, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_SCC = { SIZE_BYTE, "OPCODE_SCC", EA_DEST_ARG | NO_ARGUMENT, 0x54C0, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_SCS = { SIZE_BYTE, "OPCODE_SCS", EA_DEST_ARG | NO_ARGUMENT, 0x55C0, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_SEQ = { SIZE_BYTE, "OPCODE_SEQ", EA_DEST_ARG | NO_ARGUMENT, 0x57C0, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_SF = { SIZE_BYTE, "OPCODE_SF", EA_DEST_ARG | NO_ARGUMENT, 0x51C0, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_SGE = { SIZE_BYTE, "OPCODE_SGE", EA_DEST_ARG | NO_ARGUMENT, 0x5CC0, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_SGT = { SIZE_BYTE, "OPCODE_SGT", EA_DEST_ARG | NO_ARGUMENT, 0x5EC0, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_SHI = { SIZE_BYTE, "OPCODE_SHI", EA_DEST_ARG | NO_ARGUMENT, 0x52C0, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_SHS = { SIZE_BYTE, "OPCODE_SHS", EA_DEST_ARG | NO_ARGUMENT, 0x54C0, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_SLE = { SIZE_BYTE, "OPCODE_SLE", EA_DEST_ARG | NO_ARGUMENT, 0x5FC0, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_SLO = { SIZE_BYTE, "OPCODE_SLO", EA_DEST_ARG | NO_ARGUMENT, 0x55C0, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_SLS = { SIZE_BYTE, "OPCODE_SLS", EA_DEST_ARG | NO_ARGUMENT, 0x53C0, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_SLT = { SIZE_BYTE, "OPCODE_SLT", EA_DEST_ARG | NO_ARGUMENT, 0x5DC0, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_SMI = { SIZE_BYTE, "OPCODE_SMI", EA_DEST_ARG | NO_ARGUMENT, 0x5BC0, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_SNE = { SIZE_BYTE, "OPCODE_SNE", EA_DEST_ARG | NO_ARGUMENT, 0x56C0, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_SPL = { SIZE_BYTE, "OPCODE_SPL", EA_DEST_ARG | NO_ARGUMENT, 0x5AC0, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_ST = { SIZE_BYTE, "OPCODE_ST", EA_DEST_ARG | NO_ARGUMENT, 0x50C0, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_SUBA = { SIZE_WL, "OPCODE_SUBA", EA_SOURCE_ARG | NUM_AREG, 0x90C0, 0x0000, 6, 9, NULL };
static OPCODE OPCODE_SUBI = { SIZE_BWL, "OPCODE_SUBI", EA_IMMEDIATE | EA_DEST_ARG, 0x0400, 0x0000, 6, 0, NULL };
static OPCODE OPCODE_SUBQ = { SIZE_BWL, "OPCODE_SUBQ", NUM_IMMEDIATE_QUICK | EA_DEST_ARG, 0x5100, 0x0000, 6, 9, NULL };
static OPCODE OPCODE_SUBX = { SIZE_BWL, "OPCODE_SUBX", NUM_DREG | NUM_DREG, 0x9100, 0x0000, 6, 9, NULL };
static OPCODE OPCODE_SVC = { SIZE_BYTE, "OPCODE_SVC", EA_DEST_ARG | NO_ARGUMENT, 0x58C0, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_SVS = { SIZE_BYTE, "OPCODE_SVS", EA_DEST_ARG | NO_ARGUMENT, 0x59C0, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_SWAP = { SIZE_WORD, "OPCODE_SWAP", NUM_DREG | NO_ARGUMENT, 0x4840, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_TRAPV = { SIZE_UNDEF, "OPCODE_TRAPV", NO_ARGUMENT | NO_ARGUMENT, 0x4E76, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_XOR = { SIZE_BWL, "OPCODE_XOR", EA_SOURCE_ARG | NUM_DREG, 0x8180, 0x0000, 6, 0, NULL };
static OPCODE OPCODE_XORI = { SIZE_BWL, "OPCODE_XORI", EA_IMMEDIATE | EA_DEST_ARG, 0x0A80, 0x0000, 6, 0, NULL };
static OPCODE OPCODE_EXG = { SIZE_LONG, "OPCODE_EXG", NUM_DREG | NUM_DREG, 0xC140, 0x0000, 0, 9, NULL };
static OPCODE OPCODE_ILLEGAL = { SIZE_UNDEF, "OPCODE_ILLEGAL", NO_ARGUMENT | NO_ARGUMENT, 0x4AFC, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_JSR = { SIZE_UNDEF, "OPCODE_JSR", EA_ADDRESS_ARG | NO_ARGUMENT, 0x4E80, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_LEA = { SIZE_UNDEF, "OPCODE_LEA", EA_ADDRESS_ARG | NUM_AREG, 0x41C0, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_LINK = { SIZE_UNDEF, "OPCODE_LINK", NUM_AREG | NUM_IMMEDIATE_16, 0x4E50, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_MOVE = { SIZE_BWL, "OPCODE_MOVE", EA_SOURCE_ARG | EA_DEST_ARG, 0x0000, 0x0000, 12, 0, NULL };
static OPCODE OPCODE_MOVEC = { SIZE_LONG, "OPCODE_MOVEC", CONTROL_REG | NUM_DREG, 0x4E7A, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_MOVES = { SIZE_BWL, "OPCODE_MOVES", EA_MEMORY_ARG | NUM_DREG, 0x0E00, 0x0000, 6, 0, NULL };
static OPCODE OPCODE_MOVEM = { SIZE_WL, "OPCODE_MOVEM", REGISTER_LIST | EA_AREG_DEC_IND, 0x4880, 0x0000, 6, 0, NULL };
static OPCODE OPCODE_MOVEA = { SIZE_WL, "OPCODE_MOVEA", EA_SOURCE_ARG | NUM_AREG, 0x2040, 0x0000, 12, 0, NULL };
static OPCODE OPCODE_MOVEQ = { SIZE_LONG, "OPCODE_MOVEQ", NUM_IMMEDIATE_8 | NUM_DREG, 0x7000, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_MULU = { SIZE_WORD, "OPCODE_MULU", EA_SOURCE_ARG | NUM_DREG, 0xC0C0, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_NBC = { SIZE_BYTE, "OPCODE_NBC", EA_DEST_ARG | NO_ARGUMENT, 0x4800, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_NEG = { SIZE_BWL, "OPCODE_NEG", EA_DEST_ARG | NO_ARGUMENT, 0x4400, 0x0000, 6, 0, NULL };
static OPCODE OPCODE_NOP = { SIZE_UNDEF, "OPCODE_NOP", NO_ARGUMENT | NO_ARGUMENT, 0x4E71, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_OR = { SIZE_BWL, "OPCODE_OR", EA_SOURCE_ARG | NUM_DREG, 0x8000, 0x0000, 6, 0, NULL };
static OPCODE OPCODE_ROL = { SIZE_BWL, "OPCODE_ROL", NUM_DREG | NUM_DREG, 0xE138, 0x0000, 6, 9, NULL };
static OPCODE OPCODE_RTS = { SIZE_UNDEF, "OPCODE_RTS", NO_ARGUMENT | NO_ARGUMENT, 0x4E75, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_STOP = { SIZE_UNDEF, "OPCODE_STOP", NO_ARGUMENT | NO_ARGUMENT, 0x4E72, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_SUB = { SIZE_BWL, "OPCODE_SUB", NUM_DREG | EA_MEMORY_ARG, 0x9100, 0x0000, 6, 9, NULL };
static OPCODE OPCODE_TAS = { SIZE_BYTE, "OPCODE_TAS", EA_DEST_ARG | NO_ARGUMENT, 0x4AC0, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_TRAP = { SIZE_UNDEF, "OPCODE_TRAP", NUM_IMMEDIATE_4 | NO_ARGUMENT, 0x4E40, 0x0000, 0, 0, NULL };
static OPCODE OPCODE_TST = { SIZE_BWL, "OPCODE_TST", EA_DEST_ARG | NO_ARGUMENT, 0x4A00, 0x0000, 6, 0, NULL };
static OPCODE OPCODE_UNLK = { SIZE_UNDEF, "OPCODE_UNLK", NUM_AREG | NO_ARGUMENT, 0x4E58, 0x0000, 0, 0, NULL };


static MNEOMONIC MNEMONIC_ABCD = { "ABCD", &OPCODE_ABCD, NULL, NULL };
static MNEOMONIC MNEMONIC_ADD = { "ADD", &OPCODE_ADD, &MNEMONIC_ABCD, NULL };
static MNEOMONIC MNEMONIC_ADDI = { "ADDI", &OPCODE_ADDI, NULL, NULL };
static MNEOMONIC MNEMONIC_ADDA = { "ADDA", &OPCODE_ADDA, &MNEMONIC_ADD, &MNEMONIC_ADDI };
static MNEOMONIC MNEMONIC_ADDX = { "ADDX", &OPCODE_ADDX, NULL, NULL };
static MNEOMONIC MNEMONIC_ANDI = { "ANDI", &OPCODE_ANDI, NULL, NULL };
static MNEOMONIC MNEMONIC_AND = { "AND", &OPCODE_AND, &MNEMONIC_ADDX, &MNEMONIC_ANDI };
static MNEOMONIC MNEMONIC_ADDQ = { "ADDQ", &OPCODE_ADDQ, &MNEMONIC_ADDA, &MNEMONIC_AND };
static MNEOMONIC MNEMONIC_ASR = { "ASR", &OPCODE_ASR, NULL, NULL };
static MNEOMONIC MNEMONIC_BCHG = { "BCHG", &OPCODE_BCHG, NULL, NULL };
static MNEOMONIC MNEMONIC_BCC = { "BCC", &OPCODE_BCC, &MNEMONIC_ASR, &MNEMONIC_BCHG };
static MNEOMONIC MNEMONIC_BCS = { "BCS", &OPCODE_BCS, NULL, NULL };
static MNEOMONIC MNEMONIC_BGE = { "BGE", &OPCODE_BGE, NULL, NULL };
static MNEOMONIC MNEMONIC_BEQ = { "BEQ", &OPCODE_BEQ, &MNEMONIC_BCS, &MNEMONIC_BGE };
static MNEOMONIC MNEMONIC_BCLR = { "BCLR", &OPCODE_BCLR, &MNEMONIC_BCC, &MNEMONIC_BEQ };
static MNEOMONIC MNEMONIC_ASL = { "ASL", &OPCODE_ASL, &MNEMONIC_ADDQ, &MNEMONIC_BCLR };
static MNEOMONIC MNEMONIC_BHI = { "BHI", &OPCODE_BHI, NULL, NULL };
static MNEOMONIC MNEMONIC_BLE = { "BLE", &OPCODE_BLE, NULL, NULL };
static MNEOMONIC MNEMONIC_BHS = { "BHS", &OPCODE_BHS, &MNEMONIC_BHI, &MNEMONIC_BLE };
static MNEOMONIC MNEMONIC_BLS = { "BLS", &OPCODE_BLS, NULL, NULL };
static MNEOMONIC MNEMONIC_BMI = { "BMI", &OPCODE_BMI, NULL, NULL };
static MNEOMONIC MNEMONIC_BLT = { "BLT", &OPCODE_BLT, &MNEMONIC_BLS, &MNEMONIC_BMI };
static MNEOMONIC MNEMONIC_BLO = { "BLO", &OPCODE_BLO, &MNEMONIC_BHS, &MNEMONIC_BLT };
static MNEOMONIC MNEMONIC_BPL = { "BPL", &OPCODE_BPL, NULL, NULL };
static MNEOMONIC MNEMONIC_BSET = { "BSET", &OPCODE_BSET, NULL, NULL };
static MNEOMONIC MNEMONIC_BRA = { "BRA", &OPCODE_BRA, &MNEMONIC_BPL, &MNEMONIC_BSET };
static MNEOMONIC MNEMONIC_BTST = { "BTST", &OPCODE_BTST, NULL, NULL };
static MNEOMONIC MNEMONIC_BVS = { "BVS", &OPCODE_BVS, NULL, NULL };
static MNEOMONIC MNEMONIC_BVC = { "BVC", &OPCODE_BVC, &MNEMONIC_BTST, &MNEMONIC_BVS };
static MNEOMONIC MNEMONIC_BSR = { "BSR", &OPCODE_BSR, &MNEMONIC_BRA, &MNEMONIC_BVC };
static MNEOMONIC MNEMONIC_BNE = { "BNE", &OPCODE_BNE, &MNEMONIC_BLO, &MNEMONIC_BSR };
static MNEOMONIC MNEMONIC_BGT = { "BGT", &OPCODE_BGT, &MNEMONIC_ASL, &MNEMONIC_BNE };
static MNEOMONIC MNEMONIC_CLR = { "CLR", &OPCODE_CLR, NULL, NULL };
static MNEOMONIC MNEMONIC_CMPA = { "CMPA", &OPCODE_CMPA, NULL, NULL };
static MNEOMONIC MNEMONIC_CMP = { "CMP", &OPCODE_CMP, &MNEMONIC_CLR, &MNEMONIC_CMPA };
static MNEOMONIC MNEMONIC_CMPM = { "CMPM", &OPCODE_CMPM, NULL, NULL };
static MNEOMONIC MNEMONIC_DBCS = { "DBCS", &OPCODE_DBCS, NULL, NULL };
static MNEOMONIC MNEMONIC_DBCC = { "DBCC", &OPCODE_DBCC, &MNEMONIC_CMPM, &MNEMONIC_DBCS };
static MNEOMONIC MNEMONIC_CMPI = { "CMPI", &OPCODE_CMPI, &MNEMONIC_CMP, &MNEMONIC_DBCC };
static MNEOMONIC MNEMONIC_DBF = { "DBF", &OPCODE_DBF, NULL, NULL };
static MNEOMONIC MNEMONIC_DBGT = { "DBGT", &OPCODE_DBGT, NULL, NULL };
static MNEOMONIC MNEMONIC_DBGE = { "DBGE", &OPCODE_DBGE, &MNEMONIC_DBF, &MNEMONIC_DBGT };
static MNEOMONIC MNEMONIC_DBHS = { "DBHS", &OPCODE_DBHS, NULL, NULL };
static MNEOMONIC MNEMONIC_DBLO = { "DBLO", &OPCODE_DBLO, NULL, NULL };
static MNEOMONIC MNEMONIC_DBLE = { "DBLE", &OPCODE_DBLE, &MNEMONIC_DBHS, &MNEMONIC_DBLO };
static MNEOMONIC MNEMONIC_DBHI = { "DBHI", &OPCODE_DBHI, &MNEMONIC_DBGE, &MNEMONIC_DBLE };
static MNEOMONIC MNEMONIC_DBEQ = { "DBEQ", &OPCODE_DBEQ, &MNEMONIC_CMPI, &MNEMONIC_DBHI };
static MNEOMONIC MNEMONIC_DBLT = { "DBLT", &OPCODE_DBLT, NULL, NULL };
static MNEOMONIC MNEMONIC_DBNE = { "DBNE", &OPCODE_DBNE, NULL, NULL };
static MNEOMONIC MNEMONIC_DBMI = { "DBMI", &OPCODE_DBMI, &MNEMONIC_DBLT, &MNEMONIC_DBNE };
static MNEOMONIC MNEMONIC_DBRA = { "DBRA", &OPCODE_DBRA, NULL, NULL };
static MNEOMONIC MNEMONIC_DBVC = { "DBVC", &OPCODE_DBVC, NULL, NULL };
static MNEOMONIC MNEMONIC_DBT = { "DBT", &OPCODE_DBT, &MNEMONIC_DBRA, &MNEMONIC_DBVC };
static MNEOMONIC MNEMONIC_DBPL = { "DBPL", &OPCODE_DBPL, &MNEMONIC_DBMI, &MNEMONIC_DBT };
static MNEOMONIC MNEMONIC_DIVS = { "DIVS", &OPCODE_DIVS, NULL, NULL };
static MNEOMONIC MNEMONIC_EOR = { "EOR", &OPCODE_EOR, NULL, NULL };
static MNEOMONIC MNEMONIC_DIVU = { "DIVU", &OPCODE_DIVU, &MNEMONIC_DIVS, &MNEMONIC_EOR };
static MNEOMONIC MNEMONIC_EXG = { "EXG", &OPCODE_EXG, NULL, NULL };
static MNEOMONIC MNEMONIC_ILLEGAL = { "ILLEGAL", &OPCODE_ILLEGAL, NULL, NULL };
static MNEOMONIC MNEMONIC_EXT = { "EXT", &OPCODE_EXT, &MNEMONIC_EXG, &MNEMONIC_ILLEGAL };
static MNEOMONIC MNEMONIC_EORI = { "EORI", &OPCODE_EORI, &MNEMONIC_DIVU, &MNEMONIC_EXT };
static MNEOMONIC MNEMONIC_DBVS = { "DBVS", &OPCODE_DBVS, &MNEMONIC_DBPL, &MNEMONIC_EORI };
static MNEOMONIC MNEMONIC_DBLS = { "DBLS", &OPCODE_DBLS, &MNEMONIC_DBEQ, &MNEMONIC_DBVS };
static MNEOMONIC MNEMONIC_JSR = { "JSR", &OPCODE_JSR, NULL, NULL };
static MNEOMONIC MNEMONIC_LEA = { "LEA", &OPCODE_LEA, &MNEMONIC_JSR, NULL };
static MNEOMONIC MNEMONIC_LSL = { "LSL", &OPCODE_LSL, NULL, NULL };
static MNEOMONIC MNEMONIC_LINK = { "LINK", &OPCODE_LINK, &MNEMONIC_LEA, &MNEMONIC_LSL };
static MNEOMONIC MNEMONIC_MOVE = { "MOVE", &OPCODE_MOVE, NULL, NULL };
static MNEOMONIC MNEMONIC_MOVEC = { "MOVEC", &OPCODE_MOVEC, NULL, NULL };
static MNEOMONIC MNEMONIC_MOVEA = { "MOVEA", &OPCODE_MOVEA, &MNEMONIC_MOVE, &MNEMONIC_MOVEC };
static MNEOMONIC MNEMONIC_LSR = { "LSR", &OPCODE_LSR, &MNEMONIC_LINK, &MNEMONIC_MOVEA };
static MNEOMONIC MNEMONIC_MOVEP = { "MOVEP", &OPCODE_MOVEP, NULL, NULL };
static MNEOMONIC MNEMONIC_MOVES = { "MOVES", &OPCODE_MOVES, NULL, NULL };
static MNEOMONIC MNEMONIC_MOVEQ = { "MOVEQ", &OPCODE_MOVEQ, &MNEMONIC_MOVEP, &MNEMONIC_MOVES };
static MNEOMONIC MNEMONIC_MULU = { "MULU", &OPCODE_MULU, NULL, NULL };
static MNEOMONIC MNEMONIC_NEG = { "NEG", &OPCODE_NEG, NULL, NULL };
static MNEOMONIC MNEMONIC_NBCD = { "NBCD", &OPCODE_NBCD, &MNEMONIC_MULU, &MNEMONIC_NEG };
static MNEOMONIC MNEMONIC_MULS = { "MULS", &OPCODE_MULS, &MNEMONIC_MOVEQ, &MNEMONIC_NBCD };
static MNEOMONIC MNEMONIC_MOVEM = { "MOVEM", &OPCODE_MOVEM, &MNEMONIC_LSR, &MNEMONIC_MULS };
static MNEOMONIC MNEMONIC_NOP = { "NOP", &OPCODE_NOP, NULL, NULL };
static MNEOMONIC MNEMONIC_OR = { "OR", &OPCODE_OR, NULL, NULL };
static MNEOMONIC MNEMONIC_NOT = { "NOT", &OPCODE_NOT, &MNEMONIC_NOP, &MNEMONIC_OR };
static MNEOMONIC MNEMONIC_PEA = { "PEA", &OPCODE_PEA, NULL, NULL };
static MNEOMONIC MNEMONIC_ROL = { "ROL", &OPCODE_ROL, NULL, NULL };
static MNEOMONIC MNEMONIC_RESET = { "RESET", &OPCODE_RESET, &MNEMONIC_PEA, &MNEMONIC_ROL };
static MNEOMONIC MNEMONIC_ORI = { "ORI", &OPCODE_ORI, &MNEMONIC_NOT, &MNEMONIC_RESET };
static MNEOMONIC MNEMONIC_ROXL = { "ROXL", &OPCODE_ROXL, NULL, NULL };
static MNEOMONIC MNEMONIC_RTD = { "RTD", &OPCODE_RTD, NULL, NULL };
static MNEOMONIC MNEMONIC_ROXR = { "ROXR", &OPCODE_ROXR, &MNEMONIC_ROXL, &MNEMONIC_RTD };
static MNEOMONIC MNEMONIC_RTR = { "RTR", &OPCODE_RTR, NULL, NULL };
static MNEOMONIC MNEMONIC_SBCD = { "SBCD", &OPCODE_SBCD, NULL, NULL };
static MNEOMONIC MNEMONIC_RTS = { "RTS", &OPCODE_RTS, &MNEMONIC_RTR, &MNEMONIC_SBCD };
static MNEOMONIC MNEMONIC_RTE = { "RTE", &OPCODE_RTE, &MNEMONIC_ROXR, &MNEMONIC_RTS };
static MNEOMONIC MNEMONIC_ROR = { "ROR", &OPCODE_ROR, &MNEMONIC_ORI, &MNEMONIC_RTE };
static MNEOMONIC MNEMONIC_NEGX = { "NEGX", &OPCODE_NEGX, &MNEMONIC_MOVEM, &MNEMONIC_ROR };
static MNEOMONIC MNEMONIC_SCS = { "SCS", &OPCODE_SCS, NULL, NULL };
static MNEOMONIC MNEMONIC_SF = { "SF", &OPCODE_SF, NULL, NULL };
static MNEOMONIC MNEMONIC_SEQ = { "SEQ", &OPCODE_SEQ, &MNEMONIC_SCS, &MNEMONIC_SF };
static MNEOMONIC MNEMONIC_SGT = { "SGT", &OPCODE_SGT, NULL, NULL };
static MNEOMONIC MNEMONIC_SHS = { "SHS", &OPCODE_SHS, NULL, NULL };
static MNEOMONIC MNEMONIC_SHI = { "SHI", &OPCODE_SHI, &MNEMONIC_SGT, &MNEMONIC_SHS };
static MNEOMONIC MNEMONIC_SGE = { "SGE", &OPCODE_SGE, &MNEMONIC_SEQ, &MNEMONIC_SHI };
static MNEOMONIC MNEMONIC_SLO = { "SLO", &OPCODE_SLO, NULL, NULL };
static MNEOMONIC MNEMONIC_SLT = { "SLT", &OPCODE_SLT, NULL, NULL };
static MNEOMONIC MNEMONIC_SLS = { "SLS", &OPCODE_SLS, &MNEMONIC_SLO, &MNEMONIC_SLT };
static MNEOMONIC MNEMONIC_SNE = { "SNE", &OPCODE_SNE, NULL, NULL };
static MNEOMONIC MNEMONIC_ST = { "ST", &OPCODE_ST, NULL, NULL };
static MNEOMONIC MNEMONIC_SPL = { "SPL", &OPCODE_SPL, &MNEMONIC_SNE, &MNEMONIC_ST };
static MNEOMONIC MNEMONIC_SMI = { "SMI", &OPCODE_SMI, &MNEMONIC_SLS, &MNEMONIC_SPL };
static MNEOMONIC MNEMONIC_SLE = { "SLE", &OPCODE_SLE, &MNEMONIC_SGE, &MNEMONIC_SMI };
static MNEOMONIC MNEMONIC_SUB = { "SUB", &OPCODE_SUB, NULL, NULL };
static MNEOMONIC MNEMONIC_SUBI = { "SUBI", &OPCODE_SUBI, NULL, NULL };
static MNEOMONIC MNEMONIC_SUBA = { "SUBA", &OPCODE_SUBA, &MNEMONIC_SUB, &MNEMONIC_SUBI };
static MNEOMONIC MNEMONIC_SUBX = { "SUBX", &OPCODE_SUBX, NULL, NULL };
static MNEOMONIC MNEMONIC_SVS = { "SVS", &OPCODE_SVS, NULL, NULL };
static MNEOMONIC MNEMONIC_SVC = { "SVC", &OPCODE_SVC, &MNEMONIC_SUBX, &MNEMONIC_SVS };
static MNEOMONIC MNEMONIC_SUBQ = { "SUBQ", &OPCODE_SUBQ, &MNEMONIC_SUBA, &MNEMONIC_SVC };
static MNEOMONIC MNEMONIC_TAS = { "TAS", &OPCODE_TAS, NULL, NULL };
static MNEOMONIC MNEMONIC_TRAPV = { "TRAPV", &OPCODE_TRAPV, NULL, NULL };
static MNEOMONIC MNEMONIC_TRAP = { "TRAP", &OPCODE_TRAP, &MNEMONIC_TAS, &MNEMONIC_TRAPV };
static MNEOMONIC MNEMONIC_UNLK = { "UNLK", &OPCODE_UNLK, NULL, NULL };
static MNEOMONIC MNEMONIC_XORI = { "XORI", &OPCODE_XORI, NULL, NULL };
static MNEOMONIC MNEMONIC_XOR = { "XOR", &OPCODE_XOR, &MNEMONIC_UNLK, &MNEMONIC_XORI };
static MNEOMONIC MNEMONIC_TST = { "TST", &OPCODE_TST, &MNEMONIC_TRAP, &MNEMONIC_XOR };
static MNEOMONIC MNEMONIC_SWAP = { "SWAP", &OPCODE_SWAP, &MNEMONIC_SUBQ, &MNEMONIC_TST };
static MNEOMONIC MNEMONIC_STOP = { "STOP", &OPCODE_STOP, &MNEMONIC_SLE, &MNEMONIC_SWAP };
static MNEOMONIC MNEMONIC_SCC = { "SCC", &OPCODE_SCC, &MNEMONIC_NEGX, &MNEMONIC_STOP };
static MNEOMONIC MNEMONIC_JMP = { "JMP", &OPCODE_JMP, &MNEMONIC_BGT, &MNEMONIC_SCC };


#define ROOT_NODE OPCODE_MOVE


#endif
#endif
#endif
